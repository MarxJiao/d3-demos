!function(t){var n={};function e(i){if(n[i])return n[i].exports;var r=n[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,e),r.l=!0,r.exports}e.m=t,e.c=n,e.d=function(t,n,i){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:i})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(e.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)e.d(i,r,function(n){return t[n]}.bind(null,r));return i},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=18)}([function(t,n,e){"use strict";var i="http://www.w3.org/1999/xhtml",r={svg:"http://www.w3.org/2000/svg",xhtml:i,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},o=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),r.hasOwnProperty(n)?{space:r[n],local:t}:t};var a=function(t){var n=o(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===i&&n.documentElement.namespaceURI===i?n.createElement(t):n.createElementNS(e,t)}})(n)};function u(){}var c=function(t){return null==t?u:function(){return this.querySelector(t)}};function s(){return[]}var f=function(t){return null==t?s:function(){return this.querySelectorAll(t)}},h=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var l=document.documentElement;if(!l.matches){var d=l.webkitMatchesSelector||l.msMatchesSelector||l.mozMatchesSelector||l.oMatchesSelector;h=function(t){return function(){return d.call(this,t)}}}}var _=h,p=function(t){return new Array(t.length)};function y(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}y.prototype={constructor:y,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var v="$";function g(t,n,e,i,r,o){for(var a,u=0,c=n.length,s=o.length;u<s;++u)(a=n[u])?(a.__data__=o[u],i[u]=a):e[u]=new y(t,o[u]);for(;u<c;++u)(a=n[u])&&(r[u]=a)}function b(t,n,e,i,r,o,a){var u,c,s,f={},h=n.length,l=o.length,d=new Array(h);for(u=0;u<h;++u)(c=n[u])&&(d[u]=s=v+a.call(c,c.__data__,u,n),s in f?r[u]=c:f[s]=c);for(u=0;u<l;++u)(c=f[s=v+a.call(t,o[u],u,o)])?(i[u]=c,c.__data__=o[u],f[s]=null):e[u]=new y(t,o[u]);for(u=0;u<h;++u)(c=n[u])&&f[d[u]]===c&&(r[u]=c)}function m(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var x=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function w(t,n){return t.style.getPropertyValue(n)||x(t).getComputedStyle(t,null).getPropertyValue(n)}function M(t){return t.trim().split(/^|\s+/)}function T(t){return t.classList||new k(t)}function k(t){this._node=t,this._names=M(t.getAttribute("class")||"")}function N(t,n){for(var e=T(t),i=-1,r=n.length;++i<r;)e.add(n[i])}function C(t,n){for(var e=T(t),i=-1,r=n.length;++i<r;)e.remove(n[i])}k.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function S(){this.textContent=""}function A(){this.innerHTML=""}function E(){this.nextSibling&&this.parentNode.appendChild(this)}function j(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function O(){return null}function U(){var t=this.parentNode;t&&t.removeChild(this)}function P(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function z(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var L={},D=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(L={mouseenter:"mouseover",mouseleave:"mouseout"}));function R(t,n,e){return t=Y(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function Y(t,n,e){return function(i){var r=D;D=i;try{t.call(this,this.__data__,n,e)}finally{D=r}}}function q(t){return function(){var n=this.__on;if(n){for(var e,i=0,r=-1,o=n.length;i<o;++i)e=n[i],t.type&&e.type!==t.type||e.name!==t.name?n[++r]=e:this.removeEventListener(e.type,e.listener,e.capture);++r?n.length=r:delete this.__on}}}function F(t,n,e){var i=L.hasOwnProperty(t.type)?R:Y;return function(r,o,a){var u,c=this.__on,s=i(n,o,a);if(c)for(var f=0,h=c.length;f<h;++f)if((u=c[f]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=s,u.capture=e),void(u.value=n);this.addEventListener(t.type,s,e),u={type:t.type,name:t.name,value:n,listener:s,capture:e},c?c.push(u):this.__on=[u]}}function H(t,n,e,i){var r=D;t.sourceEvent=D,D=t;try{return n.apply(e,i)}finally{D=r}}function X(t,n,e){var i=x(t),r=i.CustomEvent;"function"==typeof r?r=new r(n,e):(r=i.document.createEvent("Event"),e?(r.initEvent(n,e.bubbles,e.cancelable),r.detail=e.detail):r.initEvent(n,!1,!1)),t.dispatchEvent(r)}var I=[null];function V(t,n){this._groups=t,this._parents=n}function $(){return new V([[document.documentElement]],I)}V.prototype=$.prototype={constructor:V,select:function(t){"function"!=typeof t&&(t=c(t));for(var n=this._groups,e=n.length,i=new Array(e),r=0;r<e;++r)for(var o,a,u=n[r],s=u.length,f=i[r]=new Array(s),h=0;h<s;++h)(o=u[h])&&(a=t.call(o,o.__data__,h,u))&&("__data__"in o&&(a.__data__=o.__data__),f[h]=a);return new V(i,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=f(t));for(var n=this._groups,e=n.length,i=[],r=[],o=0;o<e;++o)for(var a,u=n[o],c=u.length,s=0;s<c;++s)(a=u[s])&&(i.push(t.call(a,a.__data__,s,u)),r.push(a));return new V(i,r)},filter:function(t){"function"!=typeof t&&(t=_(t));for(var n=this._groups,e=n.length,i=new Array(e),r=0;r<e;++r)for(var o,a=n[r],u=a.length,c=i[r]=[],s=0;s<u;++s)(o=a[s])&&t.call(o,o.__data__,s,a)&&c.push(o);return new V(i,this._parents)},data:function(t,n){if(!t)return _=new Array(this.size()),f=-1,this.each(function(t){_[++f]=t}),_;var e,i=n?b:g,r=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var a=o.length,u=new Array(a),c=new Array(a),s=new Array(a),f=0;f<a;++f){var h=r[f],l=o[f],d=l.length,_=t.call(h,h&&h.__data__,f,r),p=_.length,y=c[f]=new Array(p),v=u[f]=new Array(p);i(h,l,y,v,s[f]=new Array(d),_,n);for(var m,x,w=0,M=0;w<p;++w)if(m=y[w]){for(w>=M&&(M=w+1);!(x=v[M])&&++M<p;);m._next=x||null}}return(u=new V(u,r))._enter=c,u._exit=s,u},enter:function(){return new V(this._enter||this._groups.map(p),this._parents)},exit:function(){return new V(this._exit||this._groups.map(p),this._parents)},merge:function(t){for(var n=this._groups,e=t._groups,i=n.length,r=e.length,o=Math.min(i,r),a=new Array(i),u=0;u<o;++u)for(var c,s=n[u],f=e[u],h=s.length,l=a[u]=new Array(h),d=0;d<h;++d)(c=s[d]||f[d])&&(l[d]=c);for(;u<i;++u)a[u]=n[u];return new V(a,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var i,r=t[n],o=r.length-1,a=r[o];--o>=0;)(i=r[o])&&(a&&a!==i.nextSibling&&a.parentNode.insertBefore(i,a),a=i);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=m);for(var e=this._groups,i=e.length,r=new Array(i),o=0;o<i;++o){for(var a,u=e[o],c=u.length,s=r[o]=new Array(c),f=0;f<c;++f)(a=u[f])&&(s[f]=a);s.sort(n)}return new V(r,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var i=t[n],r=0,o=i.length;r<o;++r){var a=i[r];if(a)return a}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,i=n.length;e<i;++e)for(var r,o=n[e],a=0,u=o.length;a<u;++a)(r=o[a])&&t.call(r,r.__data__,a,o);return this},attr:function(t,n){var e=o(t);if(arguments.length<2){var i=this.node();return e.local?i.getAttributeNS(e.space,e.local):i.getAttribute(e)}return this.each((null==n?e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof n?e.local?function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}:function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}:e.local?function(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}:function(t,n){return function(){this.setAttribute(t,n)}})(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof n?function(t,n,e){return function(){var i=n.apply(this,arguments);null==i?this.style.removeProperty(t):this.style.setProperty(t,i,e)}}:function(t,n,e){return function(){this.style.setProperty(t,n,e)}})(t,n,null==e?"":e)):w(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?function(t){return function(){delete this[t]}}:"function"==typeof n?function(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}:function(t,n){return function(){this[t]=n}})(t,n)):this.node()[t]},classed:function(t,n){var e=M(t+"");if(arguments.length<2){for(var i=T(this.node()),r=-1,o=e.length;++r<o;)if(!i.contains(e[r]))return!1;return!0}return this.each(("function"==typeof n?function(t,n){return function(){(n.apply(this,arguments)?N:C)(this,t)}}:n?function(t){return function(){N(this,t)}}:function(t){return function(){C(this,t)}})(e,n))},text:function(t){return arguments.length?this.each(null==t?S:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?A:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(E)},lower:function(){return this.each(j)},append:function(t){var n="function"==typeof t?t:a(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:a(t),i=null==n?O:"function"==typeof n?n:c(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),i.apply(this,arguments)||null)})},remove:function(){return this.each(U)},clone:function(t){return this.select(t?z:P)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var i,r,o=function(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}(t+""),a=o.length;if(!(arguments.length<2)){for(u=n?F:q,null==e&&(e=!1),i=0;i<a;++i)this.each(u(o[i],n,e));return this}var u=this.node().__on;if(u)for(var c,s=0,f=u.length;s<f;++s)for(i=0,c=u[s];i<a;++i)if((r=o[i]).type===c.type&&r.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return X(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return X(this,t,n)}})(t,n))}};var B=$,Z=function(t){return"string"==typeof t?new V([[document.querySelector(t)]],[document.documentElement]):new V([[t]],I)},W=0;function Q(){this._="@"+(++W).toString(36)}Q.prototype=function(){return new Q}.prototype={constructor:Q,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var J=function(){for(var t,n=D;t=n.sourceEvent;)n=t;return n},G=function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var i=e.createSVGPoint();return i.x=n.clientX,i.y=n.clientY,[(i=i.matrixTransform(t.getScreenCTM().inverse())).x,i.y]}var r=t.getBoundingClientRect();return[n.clientX-r.left-t.clientLeft,n.clientY-r.top-t.clientTop]},K=function(t){var n=J();return n.changedTouches&&(n=n.changedTouches[0]),G(t,n)},tt=function(t,n,e){arguments.length<3&&(e=n,n=J().changedTouches);for(var i,r=0,o=n?n.length:0;r<o;++r)if((i=n[r]).identifier===e)return G(t,i);return null};e.d(n,"c",function(){return _}),e.d(n,"d",function(){return K}),e.d(n,"e",function(){return o}),e.d(n,"f",function(){return Z}),e.d(n,"g",function(){return B}),e.d(n,"h",function(){return c}),e.d(n,"i",function(){return f}),e.d(n,"j",function(){return w}),e.d(n,"k",function(){return tt}),e.d(n,"b",function(){return D}),e.d(n,"a",function(){return H})},function(t,n,e){"use strict";var i=new Date,r=new Date;function o(t,n,e,a){function u(n){return t(n=new Date(+n)),n}return u.floor=u,u.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},u.round=function(t){var n=u(t),e=u.ceil(t);return t-n<e-t?n:e},u.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},u.range=function(e,i,r){var o,a=[];if(e=u.ceil(e),r=null==r?1:Math.floor(r),!(e<i&&r>0))return a;do{a.push(o=new Date(+e)),n(e,r),t(e)}while(o<e&&e<i);return a},u.filter=function(e){return o(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,i){if(t>=t)if(i<0)for(;++i<=0;)for(;n(t,-1),!e(t););else for(;--i>=0;)for(;n(t,1),!e(t););})},e&&(u.count=function(n,o){return i.setTime(+n),r.setTime(+o),t(i),t(r),Math.floor(e(i,r))},u.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?u.filter(a?function(n){return a(n)%t==0}:function(n){return u.count(0,n)%t==0}):u:null}),u}var a=o(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});a.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?o(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):a:null};var u=a,c=(a.range,6e4),s=6048e5,f=o(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),h=f,l=(f.range,o(function(t){t.setTime(Math.floor(t/c)*c)},function(t,n){t.setTime(+t+n*c)},function(t,n){return(n-t)/c},function(t){return t.getMinutes()})),d=l,_=(l.range,o(function(t){var n=t.getTimezoneOffset()*c%36e5;n<0&&(n+=36e5),t.setTime(36e5*Math.floor((+t-n)/36e5)+n)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()})),p=_,y=(_.range,o(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*c)/864e5},function(t){return t.getDate()-1})),v=y;y.range;function g(t){return o(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*c)/s})}var b=g(0),m=g(1),x=g(2),w=g(3),M=g(4),T=g(5),k=g(6),N=(b.range,m.range,x.range,w.range,M.range,T.range,k.range,o(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()})),C=N,S=(N.range,o(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));S.every=function(t){return isFinite(t=Math.floor(t))&&t>0?o(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};var A=S,E=(S.range,o(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*c)},function(t,n){return(n-t)/c},function(t){return t.getUTCMinutes()})),j=E,O=(E.range,o(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()})),U=O,P=(O.range,o(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1})),z=P;P.range;function L(t){return o(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/s})}var D=L(0),R=L(1),Y=L(2),q=L(3),F=L(4),H=L(5),X=L(6),I=(D.range,R.range,Y.range,q.range,F.range,H.range,X.range,o(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()})),V=I,$=(I.range,o(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));$.every=function(t){return isFinite(t=Math.floor(t))&&t>0?o(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var B=$;$.range;e.d(n,"c",function(){return u}),e.d(n,"n",function(){return u}),e.d(n,"g",function(){return h}),e.d(n,"r",function(){return h}),e.d(n,"d",function(){return d}),e.d(n,"b",function(){return p}),e.d(n,"a",function(){return v}),e.d(n,"j",function(){return b}),e.d(n,"h",function(){return b}),e.d(n,"e",function(){return m}),e.d(n,"i",function(){return M}),e.d(n,"f",function(){return C}),e.d(n,"k",function(){return A}),e.d(n,"o",function(){return j}),e.d(n,"m",function(){return U}),e.d(n,"l",function(){return z}),e.d(n,"u",function(){return D}),e.d(n,"s",function(){return D}),e.d(n,"p",function(){return R}),e.d(n,"t",function(){return F}),e.d(n,"q",function(){return V}),e.d(n,"v",function(){return B})},function(t,n,e){"use strict";var i=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},r=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return i(n(t),e)}),{left:function(n,e,i,r){for(null==i&&(i=0),null==r&&(r=n.length);i<r;){var o=i+r>>>1;t(n[o],e)<0?i=o+1:r=o}return i},right:function(n,e,i,r){for(null==i&&(i=0),null==r&&(r=n.length);i<r;){var o=i+r>>>1;t(n[o],e)>0?r=o:i=o+1}return i}}};var o=r(i),a=o.right,u=(o.left,a);var c=function(t){return null===t?NaN:+t},s=Array.prototype,f=(s.slice,s.map,function(t,n,e){t=+t,n=+n,e=(r=arguments.length)<2?(n=t,t=0,1):r<3?1:+e;for(var i=-1,r=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(r);++i<r;)o[i]=t+i*e;return o}),h=Math.sqrt(50),l=Math.sqrt(10),d=Math.sqrt(2),_=function(t,n,e){var i,r,o,a,u=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((i=n<t)&&(r=t,t=n,n=r),0===(a=p(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),o=new Array(r=Math.ceil(n-t+1));++u<r;)o[u]=(t+u)*a;else for(t=Math.floor(t*a),n=Math.ceil(n*a),o=new Array(r=Math.ceil(t-n+1));++u<r;)o[u]=(t-u)/a;return i&&o.reverse(),o};function p(t,n,e){var i=(n-t)/Math.max(0,e),r=Math.floor(Math.log(i)/Math.LN10),o=i/Math.pow(10,r);return r>=0?(o>=h?10:o>=l?5:o>=d?2:1)*Math.pow(10,r):-Math.pow(10,-r)/(o>=h?10:o>=l?5:o>=d?2:1)}function y(t,n,e){var i=Math.abs(n-t)/Math.max(0,e),r=Math.pow(10,Math.floor(Math.log(i)/Math.LN10)),o=i/r;return o>=h?r*=10:o>=l?r*=5:o>=d&&(r*=2),n<t?-r:r}var v=function(t,n,e){if(null==e&&(e=c),i=t.length){if((n=+n)<=0||i<2)return+e(t[0],0,t);if(n>=1)return+e(t[i-1],i-1,t);var i,r=(i-1)*n,o=Math.floor(r),a=+e(t[o],o,t);return a+(+e(t[o+1],o+1,t)-a)*(r-o)}},g=function(t,n){var e,i,r=t.length,o=-1;if(null==n){for(;++o<r;)if(null!=(e=t[o])&&e>=e)for(i=e;++o<r;)null!=(e=t[o])&&e>i&&(i=e)}else for(;++o<r;)if(null!=(e=n(t[o],o,t))&&e>=e)for(i=e;++o<r;)null!=(e=n(t[o],o,t))&&e>i&&(i=e);return i},b=function(t){for(var n,e,i,r=t.length,o=-1,a=0;++o<r;)a+=t[o].length;for(e=new Array(a);--r>=0;)for(n=(i=t[r]).length;--n>=0;)e[--a]=i[n];return e},m=function(t,n,e){for(var i,r,o=(null==e?t.length:e)-(n=null==n?0:+n);o;)r=Math.random()*o--|0,i=t[o+n],t[o+n]=t[r+n],t[r+n]=i;return t},x=function(t,n){var e,i=t.length,r=-1,o=0;if(null==n)for(;++r<i;)(e=+t[r])&&(o+=e);else for(;++r<i;)(e=+n(t[r],r,t))&&(o+=e);return o};e.d(n,"b",function(){return u}),e.d(n,"a",function(){return i}),e.d(n,"c",function(){return r}),e.d(n,"d",function(){return g}),e.d(n,"e",function(){return b}),e.d(n,"f",function(){return v}),e.d(n,"g",function(){return f}),e.d(n,"h",function(){return m}),e.d(n,"i",function(){return x}),e.d(n,"l",function(){return _}),e.d(n,"j",function(){return p}),e.d(n,"k",function(){return y})},function(t,n,e){"use strict";var i=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function r(t,n){var e=Object.create(t.prototype);for(var i in n)e[i]=n[i];return e}function o(){}var a="\\s*([+-]?\\d+)\\s*",u="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",c="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",s=/^#([0-9a-f]{3})$/,f=/^#([0-9a-f]{6})$/,h=new RegExp("^rgb\\("+[a,a,a]+"\\)$"),l=new RegExp("^rgb\\("+[c,c,c]+"\\)$"),d=new RegExp("^rgba\\("+[a,a,a,u]+"\\)$"),_=new RegExp("^rgba\\("+[c,c,c,u]+"\\)$"),p=new RegExp("^hsl\\("+[u,c,c]+"\\)$"),y=new RegExp("^hsla\\("+[u,c,c,u]+"\\)$"),v={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function g(t){var n;return t=(t+"").trim().toLowerCase(),(n=s.exec(t))?new M((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=f.exec(t))?b(parseInt(n[1],16)):(n=h.exec(t))?new M(n[1],n[2],n[3],1):(n=l.exec(t))?new M(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=d.exec(t))?m(n[1],n[2],n[3],n[4]):(n=_.exec(t))?m(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=p.exec(t))?T(n[1],n[2]/100,n[3]/100,1):(n=y.exec(t))?T(n[1],n[2]/100,n[3]/100,n[4]):v.hasOwnProperty(t)?b(v[t]):"transparent"===t?new M(NaN,NaN,NaN,0):null}function b(t){return new M(t>>16&255,t>>8&255,255&t,1)}function m(t,n,e,i){return i<=0&&(t=n=e=NaN),new M(t,n,e,i)}function x(t){return t instanceof o||(t=g(t)),t?new M((t=t.rgb()).r,t.g,t.b,t.opacity):new M}function w(t,n,e,i){return 1===arguments.length?x(t):new M(t,n,e,null==i?1:i)}function M(t,n,e,i){this.r=+t,this.g=+n,this.b=+e,this.opacity=+i}function T(t,n,e,i){return i<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new N(t,n,e,i)}function k(t,n,e,i){return 1===arguments.length?function(t){if(t instanceof N)return new N(t.h,t.s,t.l,t.opacity);if(t instanceof o||(t=g(t)),!t)return new N;if(t instanceof N)return t;var n=(t=t.rgb()).r/255,e=t.g/255,i=t.b/255,r=Math.min(n,e,i),a=Math.max(n,e,i),u=NaN,c=a-r,s=(a+r)/2;return c?(u=n===a?(e-i)/c+6*(e<i):e===a?(i-n)/c+2:(n-e)/c+4,c/=s<.5?a+r:2-a-r,u*=60):c=s>0&&s<1?0:u,new N(u,c,s,t.opacity)}(t):new N(t,n,e,null==i?1:i)}function N(t,n,e,i){this.h=+t,this.s=+n,this.l=+e,this.opacity=+i}function C(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}i(o,g,{displayable:function(){return this.rgb().displayable()},toString:function(){return this.rgb()+""}}),i(M,w,r(o,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new M(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new M(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),i(N,k,r(o,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new N(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new N(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,i=e+(e<.5?e:1-e)*n,r=2*e-i;return new M(C(t>=240?t-240:t+120,r,i),C(t,r,i),C(t<120?t+240:t-120,r,i),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var S=Math.PI/180,A=180/Math.PI,E=.95047,j=1,O=1.08883,U=4/29,P=6/29,z=3*P*P,L=P*P*P;function D(t){if(t instanceof Y)return new Y(t.l,t.a,t.b,t.opacity);if(t instanceof V){var n=t.h*S;return new Y(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof M||(t=x(t));var e=X(t.r),i=X(t.g),r=X(t.b),o=q((.4124564*e+.3575761*i+.1804375*r)/E),a=q((.2126729*e+.7151522*i+.072175*r)/j);return new Y(116*a-16,500*(o-a),200*(a-q((.0193339*e+.119192*i+.9503041*r)/O)),t.opacity)}function R(t,n,e,i){return 1===arguments.length?D(t):new Y(t,n,e,null==i?1:i)}function Y(t,n,e,i){this.l=+t,this.a=+n,this.b=+e,this.opacity=+i}function q(t){return t>L?Math.pow(t,1/3):t/z+U}function F(t){return t>P?t*t*t:z*(t-U)}function H(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function X(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function I(t,n,e,i){return 1===arguments.length?function(t){if(t instanceof V)return new V(t.h,t.c,t.l,t.opacity);t instanceof Y||(t=D(t));var n=Math.atan2(t.b,t.a)*A;return new V(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new V(t,n,e,null==i?1:i)}function V(t,n,e,i){this.h=+t,this.c=+n,this.l=+e,this.opacity=+i}i(Y,R,r(o,{brighter:function(t){return new Y(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Y(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return t=j*F(t),new M(H(3.2404542*(n=E*F(n))-1.5371385*t-.4985314*(e=O*F(e))),H(-.969266*n+1.8760108*t+.041556*e),H(.0556434*n-.2040259*t+1.0572252*e),this.opacity)}})),i(V,I,r(o,{brighter:function(t){return new V(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new V(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return D(this).rgb()}}));var $=-.14861,B=1.78277,Z=-.29227,W=-.90649,Q=1.97294,J=Q*W,G=Q*B,K=B*Z-W*$;function tt(t,n,e,i){return 1===arguments.length?function(t){if(t instanceof nt)return new nt(t.h,t.s,t.l,t.opacity);t instanceof M||(t=x(t));var n=t.r/255,e=t.g/255,i=t.b/255,r=(K*i+J*n-G*e)/(K+J-G),o=i-r,a=(Q*(e-r)-Z*o)/W,u=Math.sqrt(a*a+o*o)/(Q*r*(1-r)),c=u?Math.atan2(a,o)*A-120:NaN;return new nt(c<0?c+360:c,u,r,t.opacity)}(t):new nt(t,n,e,null==i?1:i)}function nt(t,n,e,i){this.h=+t,this.s=+n,this.l=+e,this.opacity=+i}i(nt,tt,r(o,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new nt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new nt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*S,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),i=Math.cos(t),r=Math.sin(t);return new M(255*(n+e*($*i+B*r)),255*(n+e*(Z*i+W*r)),255*(n+e*(Q*i)),this.opacity)}})),e.d(n,"a",function(){return g}),e.d(n,"f",function(){return w}),e.d(n,"d",function(){return k}),e.d(n,"e",function(){return R}),e.d(n,"c",function(){return I}),e.d(n,"b",function(){return tt})},function(t,n,e){"use strict";var i=e(3);function r(t,n,e,i,r){var o=t*t,a=o*t;return((1-3*t+3*o-a)*n+(4-6*o+3*a)*e+(1+3*t+3*o-3*a)*i+a*r)/6}var o=function(t){return function(){return t}};function a(t,n){return function(e){return t+e*n}}function u(t,n){var e=n-t;return e?a(t,e>180||e<-180?e-360*Math.round(e/360):e):o(isNaN(t)?n:t)}function c(t){return 1==(t=+t)?s:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(i){return Math.pow(t+i*n,e)}}(n,e,t):o(isNaN(n)?e:n)}}function s(t,n){var e=n-t;return e?a(t,e):o(isNaN(t)?n:t)}var f=function t(n){var e=c(n);function r(t,n){var r=e((t=Object(i.f)(t)).r,(n=Object(i.f)(n)).r),o=e(t.g,n.g),a=e(t.b,n.b),u=s(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=o(n),t.b=a(n),t.opacity=u(n),t+""}}return r.gamma=t,r}(1);function h(t){return function(n){var e,r,o=n.length,a=new Array(o),u=new Array(o),c=new Array(o);for(e=0;e<o;++e)r=Object(i.f)(n[e]),a[e]=r.r||0,u[e]=r.g||0,c[e]=r.b||0;return a=t(a),u=t(u),c=t(c),r.opacity=1,function(t){return r.r=a(t),r.g=u(t),r.b=c(t),r+""}}}h(function(t){var n=t.length-1;return function(e){var i=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),o=t[i],a=t[i+1],u=i>0?t[i-1]:2*o-a,c=i<n-1?t[i+2]:2*a-o;return r((e-i/n)*n,u,o,a,c)}}),h(function(t){var n=t.length;return function(e){var i=Math.floor(((e%=1)<0?++e:e)*n),o=t[(i+n-1)%n],a=t[i%n],u=t[(i+1)%n],c=t[(i+2)%n];return r((e-i/n)*n,o,a,u,c)}});var l=function(t,n){return n-=t=+t,function(e){return t+n*e}},d=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,_=new RegExp(d.source,"g");var p,y,v,g,b=function(t,n){var e,i,r,o=d.lastIndex=_.lastIndex=0,a=-1,u=[],c=[];for(t+="",n+="";(e=d.exec(t))&&(i=_.exec(n));)(r=i.index)>o&&(r=n.slice(o,r),u[a]?u[a]+=r:u[++a]=r),(e=e[0])===(i=i[0])?u[a]?u[a]+=i:u[++a]=i:(u[++a]=null,c.push({i:a,x:l(e,i)})),o=_.lastIndex;return o<n.length&&(r=n.slice(o),u[a]?u[a]+=r:u[++a]=r),u.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,i=0;i<n;++i)u[(e=c[i]).i]=e.x(t);return u.join("")})},m=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?o(n):("number"===r?l:"string"===r?(e=Object(i.a)(n))?(n=e,f):b:n instanceof i.a?f:n instanceof Date?function(t,n){var e=new Date;return n-=t=+t,function(i){return e.setTime(t+n*i),e}}:Array.isArray(n)?function(t,n){var e,i=n?n.length:0,r=t?Math.min(i,t.length):0,o=new Array(r),a=new Array(i);for(e=0;e<r;++e)o[e]=m(t[e],n[e]);for(;e<i;++e)a[e]=n[e];return function(t){for(e=0;e<r;++e)a[e]=o[e](t);return a}}:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?function(t,n){var e,i={},r={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?i[e]=m(t[e],n[e]):r[e]=n[e];return function(t){for(e in i)r[e]=i[e](t);return r}}:l)(t,n)},x=function(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}},w=180/Math.PI,M={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},T=function(t,n,e,i,r,o){var a,u,c;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(c=t*e+n*i)&&(e-=t*c,i-=n*c),(u=Math.sqrt(e*e+i*i))&&(e/=u,i/=u,c/=u),t*i<n*e&&(t=-t,n=-n,c=-c,a=-a),{translateX:r,translateY:o,rotate:Math.atan2(n,t)*w,skewX:Math.atan(c)*w,scaleX:a,scaleY:u}};function k(t,n,e,i){function r(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],c=[];return o=t(o),a=t(a),function(t,i,r,o,a,u){if(t!==r||i!==o){var c=a.push("translate(",null,n,null,e);u.push({i:c-4,x:l(t,r)},{i:c-2,x:l(i,o)})}else(r||o)&&a.push("translate("+r+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,u,c),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(r(e)+"rotate(",null,i)-2,x:l(t,n)})):n&&e.push(r(e)+"rotate("+n+i)}(o.rotate,a.rotate,u,c),function(t,n,e,o){t!==n?o.push({i:e.push(r(e)+"skewX(",null,i)-2,x:l(t,n)}):n&&e.push(r(e)+"skewX("+n+i)}(o.skewX,a.skewX,u,c),function(t,n,e,i,o,a){if(t!==e||n!==i){var u=o.push(r(o)+"scale(",null,",",null,")");a.push({i:u-4,x:l(t,e)},{i:u-2,x:l(n,i)})}else 1===e&&1===i||o.push(r(o)+"scale("+e+","+i+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,c),o=a=null,function(t){for(var n,e=-1,i=c.length;++e<i;)u[(n=c[e]).i]=n.x(t);return u.join("")}}}var N=k(function(t){return"none"===t?M:(p||(p=document.createElement("DIV"),y=document.documentElement,v=document.defaultView),p.style.transform=t,t=v.getComputedStyle(y.appendChild(p),null).getPropertyValue("transform"),y.removeChild(p),t=t.slice(7,-1).split(","),T(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),C=k(function(t){return null==t?M:(g||(g=document.createElementNS("http://www.w3.org/2000/svg","g")),g.setAttribute("transform",t),(t=g.transform.baseVal.consolidate())?(t=t.matrix,T(t.a,t.b,t.c,t.d,t.e,t.f)):M)},", ",")",")"),S=Math.SQRT2;function A(t){return((t=Math.exp(t))+1/t)/2}var E=function(t,n){var e,i,r=t[0],o=t[1],a=t[2],u=n[0],c=n[1],s=n[2],f=u-r,h=c-o,l=f*f+h*h;if(l<1e-12)i=Math.log(s/a)/S,e=function(t){return[r+t*f,o+t*h,a*Math.exp(S*t*i)]};else{var d=Math.sqrt(l),_=(s*s-a*a+4*l)/(2*a*2*d),p=(s*s-a*a-4*l)/(2*s*2*d),y=Math.log(Math.sqrt(_*_+1)-_),v=Math.log(Math.sqrt(p*p+1)-p);i=(v-y)/S,e=function(t){var n,e=t*i,u=A(y),c=a/(2*d)*(u*(n=S*e+y,((n=Math.exp(2*n))-1)/(n+1))-function(t){return((t=Math.exp(t))-1/t)/2}(y));return[r+c*f,o+c*h,a*u/A(S*e+y)]}}return e.duration=1e3*i,e};function j(t){return function(n,e){var r=t((n=Object(i.d)(n)).h,(e=Object(i.d)(e)).h),o=s(n.s,e.s),a=s(n.l,e.l),u=s(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=o(t),n.l=a(t),n.opacity=u(t),n+""}}}j(u),j(s);function O(t){return function(n,e){var r=t((n=Object(i.c)(n)).h,(e=Object(i.c)(e)).h),o=s(n.c,e.c),a=s(n.l,e.l),u=s(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=o(t),n.l=a(t),n.opacity=u(t),n+""}}}O(u),O(s);function U(t){return function n(e){function r(n,r){var o=t((n=Object(i.b)(n)).h,(r=Object(i.b)(r)).h),a=s(n.s,r.s),u=s(n.l,r.l),c=s(n.opacity,r.opacity);return function(t){return n.h=o(t),n.s=a(t),n.l=u(Math.pow(t,e)),n.opacity=c(t),n+""}}return e=+e,r.gamma=n,r}(1)}U(u);var P=U(s);e.d(n,"a",function(){return m}),e.d(n,"c",function(){return l}),e.d(n,"e",function(){return x}),e.d(n,"f",function(){return b}),e.d(n,"g",function(){return N}),e.d(n,"h",function(){return C}),e.d(n,"i",function(){return E}),e.d(n,"d",function(){return f}),e.d(n,"b",function(){return P})},function(t,n,e){"use strict";var i=Math.PI,r=2*i,o=r-1e-6;function a(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function u(){return new a}a.prototype=u.prototype={constructor:a,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,i){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+i)},bezierCurveTo:function(t,n,e,i,r,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +i+","+(this._x1=+r)+","+(this._y1=+o)},arcTo:function(t,n,e,r,o){t=+t,n=+n,e=+e,r=+r,o=+o;var a=this._x1,u=this._y1,c=e-t,s=r-n,f=a-t,h=u-n,l=f*f+h*h;if(o<0)throw new Error("negative radius: "+o);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(l>1e-6)if(Math.abs(h*c-s*f)>1e-6&&o){var d=e-a,_=r-u,p=c*c+s*s,y=d*d+_*_,v=Math.sqrt(p),g=Math.sqrt(l),b=o*Math.tan((i-Math.acos((p+l-y)/(2*v*g)))/2),m=b/g,x=b/v;Math.abs(m-1)>1e-6&&(this._+="L"+(t+m*f)+","+(n+m*h)),this._+="A"+o+","+o+",0,0,"+ +(h*d>f*_)+","+(this._x1=t+x*c)+","+(this._y1=n+x*s)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,a,u,c){t=+t,n=+n;var s=(e=+e)*Math.cos(a),f=e*Math.sin(a),h=t+s,l=n+f,d=1^c,_=c?a-u:u-a;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+h+","+l:(Math.abs(this._x1-h)>1e-6||Math.abs(this._y1-l)>1e-6)&&(this._+="L"+h+","+l),e&&(_<0&&(_=_%r+r),_>o?this._+="A"+e+","+e+",0,1,"+d+","+(t-s)+","+(n-f)+"A"+e+","+e+",0,1,"+d+","+(this._x1=h)+","+(this._y1=l):_>1e-6&&(this._+="A"+e+","+e+",0,"+ +(_>=i)+","+d+","+(this._x1=t+e*Math.cos(u))+","+(this._y1=n+e*Math.sin(u))))},rect:function(t,n,e,i){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +i+"h"+-e+"Z"},toString:function(){return this._}};var c=u;e.d(n,"a",function(){return c})},function(t,n,e){"use strict";var i,r=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,i=t.slice(0,e);return[i.length>1?i[0]+i.slice(2):i,+t.slice(e+1)]},o=function(t){return(t=r(Math.abs(t)))?t[1]:NaN},a=function(t,n){var e=r(t,n);if(!e)return t+"";var i=e[0],o=e[1];return o<0?"0."+new Array(-o).join("0")+i:i.length>o+1?i.slice(0,o+1)+"."+i.slice(o+1):i+new Array(o-i.length+2).join("0")},u={"":function(t,n){t:for(var e,i=(t=t.toPrecision(n)).length,r=1,o=-1;r<i;++r)switch(t[r]){case".":o=e=r;break;case"0":0===o&&(o=r),e=r;break;case"e":break t;default:o>0&&(o=0)}return o>0?t.slice(0,o)+t.slice(e+1):t},"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return a(100*t,n)},r:a,s:function(t,n){var e=r(t,n);if(!e)return t+"";var o=e[0],a=e[1],u=a-(i=3*Math.max(-8,Math.min(8,Math.floor(a/3))))+1,c=o.length;return u===c?o:u>c?o+new Array(u-c+1).join("0"):u>0?o.slice(0,u)+"."+o.slice(u):"0."+new Array(1-u).join("0")+r(t,Math.max(0,n+u-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},c=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;function s(t){return new f(t)}function f(t){if(!(n=c.exec(t)))throw new Error("invalid format: "+t);var n,e=n[1]||" ",i=n[2]||">",r=n[3]||"-",o=n[4]||"",a=!!n[5],s=n[6]&&+n[6],f=!!n[7],h=n[8]&&+n[8].slice(1),l=n[9]||"";"n"===l?(f=!0,l="g"):u[l]||(l=""),(a||"0"===e&&"="===i)&&(a=!0,e="0",i="="),this.fill=e,this.align=i,this.sign=r,this.symbol=o,this.zero=a,this.width=s,this.comma=f,this.precision=h,this.type=l}s.prototype=f.prototype,f.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type};var h,l,d,_=function(t){return t},p=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];h=function(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,i){for(var r=t.length,o=[],a=0,u=n[0],c=0;r>0&&u>0&&(c+u+1>i&&(u=Math.max(1,i-c)),o.push(t.substring(r-=u,r+u)),!((c+=u+1)>i));)u=n[a=(a+1)%n.length];return o.reverse().join(e)}):_,a=t.currency,c=t.decimal,f=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):_,h=t.percent||"%";function l(t){var n=(t=s(t)).fill,e=t.align,o=t.sign,l=t.symbol,d=t.zero,_=t.width,y=t.comma,v=t.precision,g=t.type,b="$"===l?a[0]:"#"===l&&/[boxX]/.test(g)?"0"+g.toLowerCase():"",m="$"===l?a[1]:/[%p]/.test(g)?h:"",x=u[g],w=!g||/[defgprs%]/.test(g);function M(t){var a,u,s,h=b,l=m;if("c"===g)l=x(t)+l,t="";else{var M=(t=+t)<0;if(t=x(Math.abs(t),v),M&&0==+t&&(M=!1),h=(M?"("===o?o:"-":"-"===o||"("===o?"":o)+h,l=("s"===g?p[8+i/3]:"")+l+(M&&"("===o?")":""),w)for(a=-1,u=t.length;++a<u;)if(48>(s=t.charCodeAt(a))||s>57){l=(46===s?c+t.slice(a+1):t.slice(a))+l,t=t.slice(0,a);break}}y&&!d&&(t=r(t,1/0));var T=h.length+t.length+l.length,k=T<_?new Array(_-T+1).join(n):"";switch(y&&d&&(t=r(k+t,k.length?_-l.length:1/0),k=""),e){case"<":t=h+t+l+k;break;case"=":t=h+k+t+l;break;case"^":t=k.slice(0,T=k.length>>1)+h+t+l+k.slice(T);break;default:t=k+h+t+l}return f(t)}return v=null==v?g?6:12:/[gprs]/.test(g)?Math.max(1,Math.min(21,v)):Math.max(0,Math.min(20,v)),M.toString=function(){return t+""},M}return{format:l,formatPrefix:function(t,n){var e=l(((t=s(t)).type="f",t)),i=3*Math.max(-8,Math.min(8,Math.floor(o(n)/3))),r=Math.pow(10,-i),a=p[8+i/3];return function(t){return e(r*t)+a}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),l=h.format,d=h.formatPrefix;var y=function(t){return Math.max(0,-o(Math.abs(t)))},v=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(o(n)/3)))-o(Math.abs(t)))},g=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,o(n)-o(t))+1};e.d(n,"a",function(){return l}),e.d(n,"b",function(){return d}),e.d(n,"c",function(){return s}),e.d(n,"d",function(){return y}),e.d(n,"e",function(){return v}),e.d(n,"f",function(){return g})},function(t,n,e){"use strict";function i(){}function r(t,n){var e=new i;if(t instanceof i)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var r,o=-1,a=t.length;if(null==n)for(;++o<a;)e.set(o,t[o]);else for(;++o<a;)e.set(n(r=t[o],o,t),r)}else if(t)for(var u in t)e.set(u,t[u]);return e}i.prototype=r.prototype={constructor:i,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var o=r;function a(){}var u=o.prototype;function c(t,n){var e=new a;if(t instanceof a)t.each(function(t){e.add(t)});else if(t){var i=-1,r=t.length;if(null==n)for(;++i<r;)e.add(t[i]);else for(;++i<r;)e.add(n(t[i],i,t))}return e}a.prototype=c.prototype={constructor:a,has:u.has,add:function(t){return this["$"+(t+="")]=t,this},remove:u.remove,clear:u.clear,values:u.keys,size:u.size,empty:u.empty,each:u.each};e.d(n,"a",function(){return o})},function(t,n,e){"use strict";var i=e(2),r=Array.prototype.slice,o=function(t){return t},a=1,u=2,c=3,s=4,f=1e-6;function h(t){return"translate("+(t+.5)+",0)"}function l(t){return"translate(0,"+(t+.5)+")"}function d(){return!this.__axis}function _(t,n){var e=[],i=null,_=null,p=6,y=6,v=3,g=t===a||t===s?-1:1,b=t===s||t===u?"x":"y",m=t===a||t===c?h:l;function x(r){var h=null==i?n.ticks?n.ticks.apply(n,e):n.domain():i,l=null==_?n.tickFormat?n.tickFormat.apply(n,e):o:_,x=Math.max(p,0)+v,w=n.range(),M=+w[0]+.5,T=+w[w.length-1]+.5,k=(n.bandwidth?function(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}:function(t){return function(n){return+t(n)}})(n.copy()),N=r.selection?r.selection():r,C=N.selectAll(".domain").data([null]),S=N.selectAll(".tick").data(h,n).order(),A=S.exit(),E=S.enter().append("g").attr("class","tick"),j=S.select("line"),O=S.select("text");C=C.merge(C.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),S=S.merge(E),j=j.merge(E.append("line").attr("stroke","#000").attr(b+"2",g*p)),O=O.merge(E.append("text").attr("fill","#000").attr(b,g*x).attr("dy",t===a?"0em":t===c?"0.71em":"0.32em")),r!==N&&(C=C.transition(r),S=S.transition(r),j=j.transition(r),O=O.transition(r),A=A.transition(r).attr("opacity",f).attr("transform",function(t){return isFinite(t=k(t))?m(t):this.getAttribute("transform")}),E.attr("opacity",f).attr("transform",function(t){var n=this.parentNode.__axis;return m(n&&isFinite(n=n(t))?n:k(t))})),A.remove(),C.attr("d",t===s||t==u?"M"+g*y+","+M+"H0.5V"+T+"H"+g*y:"M"+M+","+g*y+"V0.5H"+T+"V"+g*y),S.attr("opacity",1).attr("transform",function(t){return m(k(t))}),j.attr(b+"2",g*p),O.attr(b,g*x).text(l),N.filter(d).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===u?"start":t===s?"end":"middle"),N.each(function(){this.__axis=k})}return x.scale=function(t){return arguments.length?(n=t,x):n},x.ticks=function(){return e=r.call(arguments),x},x.tickArguments=function(t){return arguments.length?(e=null==t?[]:r.call(t),x):e.slice()},x.tickValues=function(t){return arguments.length?(i=null==t?null:r.call(t),x):i&&i.slice()},x.tickFormat=function(t){return arguments.length?(_=t,x):_},x.tickSize=function(t){return arguments.length?(p=y=+t,x):p},x.tickSizeInner=function(t){return arguments.length?(p=+t,x):p},x.tickSizeOuter=function(t){return arguments.length?(y=+t,x):y},x.tickPadding=function(t){return arguments.length?(v=+t,x):v},x}function p(t){return _(c,t)}function y(t){return _(s,t)}var v={value:function(){}};function g(){for(var t,n=0,e=arguments.length,i={};n<e;++n){if(!(t=arguments[n]+"")||t in i)throw new Error("illegal type: "+t);i[t]=[]}return new b(i)}function b(t){this._=t}function m(t,n){for(var e,i=0,r=t.length;i<r;++i)if((e=t[i]).name===n)return e.value}function x(t,n,e){for(var i=0,r=t.length;i<r;++i)if(t[i].name===n){t[i]=v,t=t.slice(0,i).concat(t.slice(i+1));break}return null!=e&&t.push({name:n,value:e}),t}b.prototype=g.prototype={constructor:b,on:function(t,n){var e,i,r=this._,o=(i=r,(t+"").trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");if(e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),t&&!i.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})),a=-1,u=o.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++a<u;)if(e=(t=o[a]).type)r[e]=x(r[e],t.name,n);else if(null==n)for(e in r)r[e]=x(r[e],t.name,null);return this}for(;++a<u;)if((e=(t=o[a]).type)&&(e=m(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new b(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,i,r=new Array(e),o=0;o<e;++o)r[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(i=this._[t]).length;o<e;++o)i[o].value.apply(n,r)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var i=this._[t],r=0,o=i.length;r<o;++r)i[r].value.apply(n,e)}};var w=g,M=e(0);function T(){M.b.stopImmediatePropagation()}var k=function(){M.b.preventDefault(),M.b.stopImmediatePropagation()},N=function(t){var n=t.document.documentElement,e=Object(M.f)(t).on("dragstart.drag",k,!0);"onselectstart"in n?e.on("selectstart.drag",k,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")};function C(t,n){var e=t.document.documentElement,i=Object(M.f)(t).on("dragstart.drag",null);n&&(i.on("click.drag",k,!0),setTimeout(function(){i.on("click.drag",null)},0)),"onselectstart"in e?i.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}var S=function(t){return function(){return t}};function A(t,n,e,i,r,o,a,u,c,s){this.target=t,this.type=n,this.subject=e,this.identifier=i,this.active=r,this.x=o,this.y=a,this.dx=u,this.dy=c,this._=s}function E(){return!M.b.button}function j(){return this.parentNode}function O(t){return null==t?{x:M.b.x,y:M.b.y}:t}function U(){return"ontouchstart"in this}A.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var P,z,L=function(){var t,n,e,i,r=E,o=j,a=O,u=U,c={},s=w("start","drag","end"),f=0,h=0;function l(t){t.on("mousedown.drag",d).filter(u).on("touchstart.drag",y).on("touchmove.drag",v).on("touchend.drag touchcancel.drag",g).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function d(){if(!i&&r.apply(this,arguments)){var a=b("mouse",o.apply(this,arguments),M.d,this,arguments);a&&(Object(M.f)(M.b.view).on("mousemove.drag",_,!0).on("mouseup.drag",p,!0),N(M.b.view),T(),e=!1,t=M.b.clientX,n=M.b.clientY,a("start"))}}function _(){if(k(),!e){var i=M.b.clientX-t,r=M.b.clientY-n;e=i*i+r*r>h}c.mouse("drag")}function p(){Object(M.f)(M.b.view).on("mousemove.drag mouseup.drag",null),C(M.b.view,e),k(),c.mouse("end")}function y(){if(r.apply(this,arguments)){var t,n,e=M.b.changedTouches,i=o.apply(this,arguments),a=e.length;for(t=0;t<a;++t)(n=b(e[t].identifier,i,M.k,this,arguments))&&(T(),n("start"))}}function v(){var t,n,e=M.b.changedTouches,i=e.length;for(t=0;t<i;++t)(n=c[e[t].identifier])&&(k(),n("drag"))}function g(){var t,n,e=M.b.changedTouches,r=e.length;for(i&&clearTimeout(i),i=setTimeout(function(){i=null},500),t=0;t<r;++t)(n=c[e[t].identifier])&&(T(),n("end"))}function b(t,n,e,i,r){var o,u,h,d=e(n,t),_=s.copy();if(Object(M.a)(new A(l,"beforestart",o,t,f,d[0],d[1],0,0,_),function(){return null!=(M.b.subject=o=a.apply(i,r))&&(u=o.x-d[0]||0,h=o.y-d[1]||0,!0)}))return function a(s){var p,y=d;switch(s){case"start":c[t]=a,p=f++;break;case"end":delete c[t],--f;case"drag":d=e(n,t),p=f}Object(M.a)(new A(l,s,o,t,p,d[0]+u,d[1]+h,d[0]-y[0],d[1]-y[1],_),_.apply,_,[s,i,r])}}return l.filter=function(t){return arguments.length?(r="function"==typeof t?t:S(!!t),l):r},l.container=function(t){return arguments.length?(o="function"==typeof t?t:S(t),l):o},l.subject=function(t){return arguments.length?(a="function"==typeof t?t:S(t),l):a},l.touchable=function(t){return arguments.length?(u="function"==typeof t?t:S(!!t),l):u},l.on=function(){var t=s.on.apply(s,arguments);return t===s?l:t},l.clickDistance=function(t){return arguments.length?(h=(t=+t)*t,l):Math.sqrt(h)},l},D=e(4),R=0,Y=0,q=0,F=1e3,H=0,X=0,I=0,V="object"==typeof performance&&performance.now?performance:Date,$="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function B(){return X||($(Z),X=V.now()+I)}function Z(){X=0}function W(){this._call=this._time=this._next=null}function Q(t,n,e){var i=new W;return i.restart(t,n,e),i}function J(){X=(H=V.now())+I,R=Y=0;try{!function(){B(),++R;for(var t,n=P;n;)(t=X-n._time)>=0&&n._call.call(null,t),n=n._next;--R}()}finally{R=0,function(){var t,n,e=P,i=1/0;for(;e;)e._call?(i>e._time&&(i=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:P=n);z=t,K(i)}(),X=0}}function G(){var t=V.now(),n=t-H;n>F&&(I-=n,H=t)}function K(t){R||(Y&&(Y=clearTimeout(Y)),t-X>24?(t<1/0&&(Y=setTimeout(J,t-V.now()-I)),q&&(q=clearInterval(q))):(q||(H=V.now(),q=setInterval(G,F)),R=1,$(J)))}W.prototype=Q.prototype={constructor:W,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?B():+e)+(null==n?0:+n),this._next||z===this||(z?z._next=this:P=this,z=this),this._call=t,this._time=e,K()},stop:function(){this._call&&(this._call=null,this._time=1/0,K())}};var tt=function(t,n,e){var i=new W;return n=null==n?0:+n,i.restart(function(e){i.stop(),t(e+n)},n,e),i},nt=w("start","end","interrupt"),et=[],it=0,rt=1,ot=2,at=3,ut=4,ct=5,st=6,ft=function(t,n,e,i,r,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var i,r=t.__transition;function o(c){var s,f,h,l;if(e.state!==rt)return u();for(s in r)if((l=r[s]).name===e.name){if(l.state===at)return tt(o);l.state===ut?(l.state=st,l.timer.stop(),l.on.call("interrupt",t,t.__data__,l.index,l.group),delete r[s]):+s<n&&(l.state=st,l.timer.stop(),delete r[s])}if(tt(function(){e.state===at&&(e.state=ut,e.timer.restart(a,e.delay,e.time),a(c))}),e.state=ot,e.on.call("start",t,t.__data__,e.index,e.group),e.state===ot){for(e.state=at,i=new Array(h=e.tween.length),s=0,f=-1;s<h;++s)(l=e.tween[s].value.call(t,t.__data__,e.index,e.group))&&(i[++f]=l);i.length=f+1}}function a(n){for(var r=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=ct,1),o=-1,a=i.length;++o<a;)i[o].call(null,r);e.state===ct&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var i in e.state=st,e.timer.stop(),delete r[n],r)return;delete t.__transition}r[n]=e,e.timer=Q(function(t){e.state=rt,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)},0,e.time)}(t,e,{name:n,index:i,group:r,on:nt,tween:et,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:it})};function ht(t,n){var e=dt(t,n);if(e.state>it)throw new Error("too late; already scheduled");return e}function lt(t,n){var e=dt(t,n);if(e.state>ot)throw new Error("too late; already started");return e}function dt(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var _t=function(t,n){var e,i,r,o=t.__transition,a=!0;if(o){for(r in n=null==n?null:n+"",o)(e=o[r]).name===n?(i=e.state>ot&&e.state<ct,e.state=st,e.timer.stop(),i&&e.on.call("interrupt",t,t.__data__,e.index,e.group),delete o[r]):a=!1;a&&delete t.__transition}};function pt(t,n,e){var i=t._id;return t.each(function(){var t=lt(this,i);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return dt(t,i).value[n]}}var yt=e(3),vt=function(t,n){var e;return("number"==typeof n?D.c:n instanceof yt.a?D.d:(e=Object(yt.a)(n))?(n=e,D.d):D.f)(t,n)};var gt=M.g.prototype.constructor;var bt=0;function mt(t,n,e,i){this._groups=t,this._parents=n,this._name=e,this._id=i}function xt(){return++bt}var wt=M.g.prototype;mt.prototype=function(t){return Object(M.g)().transition(t)}.prototype={constructor:mt,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Object(M.h)(t));for(var i=this._groups,r=i.length,o=new Array(r),a=0;a<r;++a)for(var u,c,s=i[a],f=s.length,h=o[a]=new Array(f),l=0;l<f;++l)(u=s[l])&&(c=t.call(u,u.__data__,l,s))&&("__data__"in u&&(c.__data__=u.__data__),h[l]=c,ft(h[l],n,e,l,h,dt(u,e)));return new mt(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Object(M.i)(t));for(var i=this._groups,r=i.length,o=[],a=[],u=0;u<r;++u)for(var c,s=i[u],f=s.length,h=0;h<f;++h)if(c=s[h]){for(var l,d=t.call(c,c.__data__,h,s),_=dt(c,e),p=0,y=d.length;p<y;++p)(l=d[p])&&ft(l,n,e,p,d,_);o.push(d),a.push(c)}return new mt(o,a,n,e)},filter:function(t){"function"!=typeof t&&(t=Object(M.c)(t));for(var n=this._groups,e=n.length,i=new Array(e),r=0;r<e;++r)for(var o,a=n[r],u=a.length,c=i[r]=[],s=0;s<u;++s)(o=a[s])&&t.call(o,o.__data__,s,a)&&c.push(o);return new mt(i,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,i=n.length,r=e.length,o=Math.min(i,r),a=new Array(i),u=0;u<o;++u)for(var c,s=n[u],f=e[u],h=s.length,l=a[u]=new Array(h),d=0;d<h;++d)(c=s[d]||f[d])&&(l[d]=c);for(;u<i;++u)a[u]=n[u];return new mt(a,this._parents,this._name,this._id)},selection:function(){return new gt(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=xt(),i=this._groups,r=i.length,o=0;o<r;++o)for(var a,u=i[o],c=u.length,s=0;s<c;++s)if(a=u[s]){var f=dt(a,n);ft(a,t,e,s,u,{time:f.time+f.delay+f.duration,delay:0,duration:f.duration,ease:f.ease})}return new mt(i,this._parents,t,e)},call:wt.call,nodes:wt.nodes,node:wt.node,size:wt.size,empty:wt.empty,each:wt.each,on:function(t,n){var e=this._id;return arguments.length<2?dt(this.node(),e).on.on(t):this.each(function(t,n,e){var i,r,o=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}(n)?ht:lt;return function(){var a=o(this,t),u=a.on;u!==i&&(r=(i=u).copy()).on(n,e),a.on=r}}(e,t,n))},attr:function(t,n){var e=Object(M.e)(t),i="transform"===e?D.h:vt;return this.attrTween(t,"function"==typeof n?(e.local?function(t,n,e){var i,r,o;return function(){var a,u=e(this);if(null!=u)return(a=this.getAttributeNS(t.space,t.local))===u?null:a===i&&u===r?o:o=n(i=a,r=u);this.removeAttributeNS(t.space,t.local)}}:function(t,n,e){var i,r,o;return function(){var a,u=e(this);if(null!=u)return(a=this.getAttribute(t))===u?null:a===i&&u===r?o:o=n(i=a,r=u);this.removeAttribute(t)}})(e,i,pt(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(t,n,e){var i,r;return function(){var o=this.getAttributeNS(t.space,t.local);return o===e?null:o===i?r:r=n(i=o,e)}}:function(t,n,e){var i,r;return function(){var o=this.getAttribute(t);return o===e?null:o===i?r:r=n(i=o,e)}})(e,i,n+""))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var i=Object(M.e)(t);return this.tween(e,(i.local?function(t,n){function e(){var e=this,i=n.apply(e,arguments);return i&&function(n){e.setAttributeNS(t.space,t.local,i(n))}}return e._value=n,e}:function(t,n){function e(){var e=this,i=n.apply(e,arguments);return i&&function(n){e.setAttribute(t,i(n))}}return e._value=n,e})(i,n))},style:function(t,n,e){var i="transform"==(t+="")?D.g:vt;return null==n?this.styleTween(t,function(t,n){var e,i,r;return function(){var o=Object(M.j)(this,t),a=(this.style.removeProperty(t),Object(M.j)(this,t));return o===a?null:o===e&&a===i?r:r=n(e=o,i=a)}}(t,i)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof n?function(t,n,e){var i,r,o;return function(){var a=Object(M.j)(this,t),u=e(this);return null==u&&(this.style.removeProperty(t),u=Object(M.j)(this,t)),a===u?null:a===i&&u===r?o:o=n(i=a,r=u)}}(t,i,pt(this,"style."+t,n)):function(t,n,e){var i,r;return function(){var o=Object(M.j)(this,t);return o===e?null:o===i?r:r=n(i=o,e)}}(t,i,n+""),e)},styleTween:function(t,n,e){var i="style."+(t+="");if(arguments.length<2)return(i=this.tween(i))&&i._value;if(null==n)return this.tween(i,null);if("function"!=typeof n)throw new Error;return this.tween(i,function(t,n,e){function i(){var i=this,r=n.apply(i,arguments);return r&&function(n){i.style.setProperty(t,r(n),e)}}return i._value=n,i}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(pt(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var i,r=dt(this.node(),e).tween,o=0,a=r.length;o<a;++o)if((i=r[o]).name===t)return i.value;return null}return this.each((null==n?function(t,n){var e,i;return function(){var r=lt(this,t),o=r.tween;if(o!==e)for(var a=0,u=(i=e=o).length;a<u;++a)if(i[a].name===n){(i=i.slice()).splice(a,1);break}r.tween=i}}:function(t,n,e){var i,r;if("function"!=typeof e)throw new Error;return function(){var o=lt(this,t),a=o.tween;if(a!==i){r=(i=a).slice();for(var u={name:n,value:e},c=0,s=r.length;c<s;++c)if(r[c].name===n){r[c]=u;break}c===s&&r.push(u)}o.tween=r}})(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){ht(this,t).delay=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){ht(this,t).delay=n}})(n,t)):dt(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){lt(this,t).duration=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){lt(this,t).duration=n}})(n,t)):dt(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){lt(this,t).ease=n}}(n,t)):dt(this.node(),n).ease}};(function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e})(3),function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Math.PI;(function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e})(1.70158),function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158);var Mt=2*Math.PI,Tt=(function t(n,e){var i=Math.asin(1/(n=Math.max(1,n)))*(e/=Mt);function r(t){return n*Math.pow(2,10*--t)*Math.sin((i-t)/e)}return r.amplitude=function(n){return t(n,e*Mt)},r.period=function(e){return t(n,e)},r}(1,.3),function t(n,e){var i=Math.asin(1/(n=Math.max(1,n)))*(e/=Mt);function r(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+i)/e)}return r.amplitude=function(n){return t(n,e*Mt)},r.period=function(e){return t(n,e)},r}(1,.3),function t(n,e){var i=Math.asin(1/(n=Math.max(1,n)))*(e/=Mt);function r(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((i-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((i+t)/e))/2}return r.amplitude=function(n){return t(n,e*Mt)},r.period=function(e){return t(n,e)},r}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function kt(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Tt.time=B(),Tt;return e}M.g.prototype.interrupt=function(t){return this.each(function(){_t(this,t)})},M.g.prototype.transition=function(t){var n,e;t instanceof mt?(n=t._id,t=t._name):(n=xt(),(e=Tt).time=B(),t=null==t?null:t+"");for(var i=this._groups,r=i.length,o=0;o<r;++o)for(var a,u=i[o],c=u.length,s=0;s<c;++s)(a=u[s])&&ft(a,t,n,s,u,e||kt(a,n));return new mt(i,this._parents,t,n)};["e","w"].map(Nt),["n","s"].map(Nt),["n","e","s","w","nw","ne","se","sw"].map(Nt);function Nt(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice,e(5);var Ct=e(7),St={},At={},Et=34,jt=10,Ot=13;function Ut(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}var Pt=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function i(t,n){var i,r=[],o=t.length,a=0,u=0,c=o<=0,s=!1;function f(){if(c)return At;if(s)return s=!1,St;var n,i,r=a;if(t.charCodeAt(r)===Et){for(;a++<o&&t.charCodeAt(a)!==Et||t.charCodeAt(++a)===Et;);return(n=a)>=o?c=!0:(i=t.charCodeAt(a++))===jt?s=!0:i===Ot&&(s=!0,t.charCodeAt(a)===jt&&++a),t.slice(r+1,n-1).replace(/""/g,'"')}for(;a<o;){if((i=t.charCodeAt(n=a++))===jt)s=!0;else if(i===Ot)s=!0,t.charCodeAt(a)===jt&&++a;else if(i!==e)continue;return t.slice(r,n)}return c=!0,t.slice(r,o)}for(t.charCodeAt(o-1)===jt&&--o,t.charCodeAt(o-1)===Ot&&--o;(i=f())!==At;){for(var h=[];i!==St&&i!==At;)h.push(i),i=f();n&&null==(h=n(h,u++))||r.push(h)}return r}function r(n){return n.map(o).join(t)}function o(t){return null==t?"":n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,r,o=i(t,function(t,i){if(e)return e(t,i-1);r=t,e=n?function(t,n){var e=Ut(t);return function(i,r){return n(e(i),r,t)}}(t,n):Ut(t)});return o.columns=r||[],o},parseRows:i,format:function(n,e){return null==e&&(e=function(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var i in t)i in n||e.push(n[i]=i)}),e}(n)),[e.map(o).join(t)].concat(n.map(function(n){return e.map(function(t){return o(n[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(r).join("\n")}}},zt=Pt(","),Lt=zt.parse,Dt=(zt.parseRows,zt.format,zt.formatRows,Pt("\t")),Rt=Dt.parse;Dt.parseRows,Dt.format,Dt.formatRows;function Yt(t,n,e,i){if(isNaN(n)||isNaN(e))return t;var r,o,a,u,c,s,f,h,l,d=t._root,_={data:i},p=t._x0,y=t._y0,v=t._x1,g=t._y1;if(!d)return t._root=_,t;for(;d.length;)if((s=n>=(o=(p+v)/2))?p=o:v=o,(f=e>=(a=(y+g)/2))?y=a:g=a,r=d,!(d=d[h=f<<1|s]))return r[h]=_,t;if(u=+t._x.call(null,d.data),c=+t._y.call(null,d.data),n===u&&e===c)return _.next=d,r?r[h]=_:t._root=_,t;do{r=r?r[h]=new Array(4):t._root=new Array(4),(s=n>=(o=(p+v)/2))?p=o:v=o,(f=e>=(a=(y+g)/2))?y=a:g=a}while((h=f<<1|s)==(l=(c>=a)<<1|u>=o));return r[l]=d,r[h]=_,t}var qt=function(t,n,e,i,r){this.node=t,this.x0=n,this.y0=e,this.x1=i,this.y1=r};function Ft(t){return t[0]}function Ht(t){return t[1]}function Xt(t,n,e){var i=new It(null==n?Ft:n,null==e?Ht:e,NaN,NaN,NaN,NaN);return null==t?i:i.addAll(t)}function It(t,n,e,i,r,o){this._x=t,this._y=n,this._x0=e,this._y0=i,this._x1=r,this._y1=o,this._root=void 0}function Vt(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var $t=Xt.prototype=It.prototype;$t.copy=function(){var t,n,e=new It(this._x,this._y,this._x0,this._y0,this._x1,this._y1),i=this._root;if(!i)return e;if(!i.length)return e._root=Vt(i),e;for(t=[{source:i,target:e._root=new Array(4)}];i=t.pop();)for(var r=0;r<4;++r)(n=i.source[r])&&(n.length?t.push({source:n,target:i.target[r]=new Array(4)}):i.target[r]=Vt(n));return e},$t.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return Yt(this.cover(n,e),n,e,t)},$t.addAll=function(t){var n,e,i,r,o=t.length,a=new Array(o),u=new Array(o),c=1/0,s=1/0,f=-1/0,h=-1/0;for(e=0;e<o;++e)isNaN(i=+this._x.call(null,n=t[e]))||isNaN(r=+this._y.call(null,n))||(a[e]=i,u[e]=r,i<c&&(c=i),i>f&&(f=i),r<s&&(s=r),r>h&&(h=r));for(f<c&&(c=this._x0,f=this._x1),h<s&&(s=this._y0,h=this._y1),this.cover(c,s).cover(f,h),e=0;e<o;++e)Yt(this,a[e],u[e],t[e]);return this},$t.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,i=this._y0,r=this._x1,o=this._y1;if(isNaN(e))r=(e=Math.floor(t))+1,o=(i=Math.floor(n))+1;else{if(!(e>t||t>r||i>n||n>o))return this;var a,u,c=r-e,s=this._root;switch(u=(n<(i+o)/2)<<1|t<(e+r)/2){case 0:do{(a=new Array(4))[u]=s,s=a}while(o=i+(c*=2),t>(r=e+c)||n>o);break;case 1:do{(a=new Array(4))[u]=s,s=a}while(o=i+(c*=2),(e=r-c)>t||n>o);break;case 2:do{(a=new Array(4))[u]=s,s=a}while(i=o-(c*=2),t>(r=e+c)||i>n);break;case 3:do{(a=new Array(4))[u]=s,s=a}while(i=o-(c*=2),(e=r-c)>t||i>n)}this._root&&this._root.length&&(this._root=s)}return this._x0=e,this._y0=i,this._x1=r,this._y1=o,this},$t.data=function(){var t=[];return this.visit(function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)}),t},$t.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},$t.find=function(t,n,e){var i,r,o,a,u,c,s,f=this._x0,h=this._y0,l=this._x1,d=this._y1,_=[],p=this._root;for(p&&_.push(new qt(p,f,h,l,d)),null==e?e=1/0:(f=t-e,h=n-e,l=t+e,d=n+e,e*=e);c=_.pop();)if(!(!(p=c.node)||(r=c.x0)>l||(o=c.y0)>d||(a=c.x1)<f||(u=c.y1)<h))if(p.length){var y=(r+a)/2,v=(o+u)/2;_.push(new qt(p[3],y,v,a,u),new qt(p[2],r,v,y,u),new qt(p[1],y,o,a,v),new qt(p[0],r,o,y,v)),(s=(n>=v)<<1|t>=y)&&(c=_[_.length-1],_[_.length-1]=_[_.length-1-s],_[_.length-1-s]=c)}else{var g=t-+this._x.call(null,p.data),b=n-+this._y.call(null,p.data),m=g*g+b*b;if(m<e){var x=Math.sqrt(e=m);f=t-x,h=n-x,l=t+x,d=n+x,i=p.data}}return i},$t.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(a=+this._y.call(null,t)))return this;var n,e,i,r,o,a,u,c,s,f,h,l,d=this._root,_=this._x0,p=this._y0,y=this._x1,v=this._y1;if(!d)return this;if(d.length)for(;;){if((s=o>=(u=(_+y)/2))?_=u:y=u,(f=a>=(c=(p+v)/2))?p=c:v=c,n=d,!(d=d[h=f<<1|s]))return this;if(!d.length)break;(n[h+1&3]||n[h+2&3]||n[h+3&3])&&(e=n,l=h)}for(;d.data!==t;)if(i=d,!(d=d.next))return this;return(r=d.next)&&delete d.next,i?(r?i.next=r:delete i.next,this):n?(r?n[h]=r:delete n[h],(d=n[0]||n[1]||n[2]||n[3])&&d===(n[3]||n[2]||n[1]||n[0])&&!d.length&&(e?e[l]=d:this._root=d),this):(this._root=r,this)},$t.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},$t.root=function(){return this._root},$t.size=function(){var t=0;return this.visit(function(n){if(!n.length)do{++t}while(n=n.next)}),t},$t.visit=function(t){var n,e,i,r,o,a,u=[],c=this._root;for(c&&u.push(new qt(c,this._x0,this._y0,this._x1,this._y1));n=u.pop();)if(!t(c=n.node,i=n.x0,r=n.y0,o=n.x1,a=n.y1)&&c.length){var s=(i+o)/2,f=(r+a)/2;(e=c[3])&&u.push(new qt(e,s,f,o,a)),(e=c[2])&&u.push(new qt(e,i,f,s,a)),(e=c[1])&&u.push(new qt(e,s,r,o,f)),(e=c[0])&&u.push(new qt(e,i,r,s,f))}return this},$t.visitAfter=function(t){var n,e=[],i=[];for(this._root&&e.push(new qt(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var r=n.node;if(r.length){var o,a=n.x0,u=n.y0,c=n.x1,s=n.y1,f=(a+c)/2,h=(u+s)/2;(o=r[0])&&e.push(new qt(o,a,u,f,h)),(o=r[1])&&e.push(new qt(o,f,u,c,h)),(o=r[2])&&e.push(new qt(o,a,h,f,s)),(o=r[3])&&e.push(new qt(o,f,h,c,s))}i.push(n)}for(;n=i.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},$t.x=function(t){return arguments.length?(this._x=t,this):this._x},$t.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var Bt=e(6),Zt=function(){return new Wt};function Wt(){this.reset()}Wt.prototype={constructor:Wt,reset:function(){this.s=this.t=0},add:function(t){Jt(Qt,t,this.t),Jt(this,Qt.s,this.s),this.s?this.t+=Qt.t:this.s=Qt.t},valueOf:function(){return this.s}};var Qt=new Wt;function Jt(t,n,e){var i=t.s=n+e,r=i-n,o=i-r;t.t=n-o+(e-r)}var Gt=1e-6,Kt=Math.PI,tn=Kt/2,nn=Kt/4,en=2*Kt,rn=Kt/180,on=Math.abs,an=Math.atan,un=Math.atan2,cn=Math.cos,sn=(Math.ceil,Math.exp),fn=(Math.floor,Math.log),hn=(Math.pow,Math.sin),ln=(Math.sign,Math.sqrt),dn=Math.tan;function _n(t){return t>1?0:t<-1?Kt:Math.acos(t)}function pn(t){return t>1?tn:t<-1?-tn:Math.asin(t)}function yn(){}Zt(),Zt();function vn(t){var n=t[0],e=t[1],i=cn(e);return[i*cn(n),i*hn(n),hn(e)]}function gn(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function bn(t){var n=ln(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}Zt();function mn(t,n){return[t>Kt?t-en:t<-Kt?t+en:t,n]}mn.invert=mn;var xn=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:yn,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},wn=function(t,n){return on(t[0]-n[0])<Gt&&on(t[1]-n[1])<Gt};function Mn(t,n,e,i){this.x=t,this.z=n,this.o=e,this.e=i,this.v=!1,this.n=this.p=null}var Tn=function(t,n,e,i,r){var o,a,u=[],c=[];if(t.forEach(function(t){if(!((n=t.length-1)<=0)){var n,e,i=t[0],a=t[n];if(wn(i,a)){for(r.lineStart(),o=0;o<n;++o)r.point((i=t[o])[0],i[1]);r.lineEnd()}else u.push(e=new Mn(i,t,null,!0)),c.push(e.o=new Mn(i,null,e,!1)),u.push(e=new Mn(a,t,null,!1)),c.push(e.o=new Mn(a,null,e,!0))}}),u.length){for(c.sort(n),kn(u),kn(c),o=0,a=c.length;o<a;++o)c[o].e=e=!e;for(var s,f,h=u[0];;){for(var l=h,d=!0;l.v;)if((l=l.n)===h)return;s=l.z,r.lineStart();do{if(l.v=l.o.v=!0,l.e){if(d)for(o=0,a=s.length;o<a;++o)r.point((f=s[o])[0],f[1]);else i(l.x,l.n.x,1,r);l=l.n}else{if(d)for(s=l.p.z,o=s.length-1;o>=0;--o)r.point((f=s[o])[0],f[1]);else i(l.x,l.p.x,-1,r);l=l.p}s=(l=l.o).z,d=!d}while(!l.v);r.lineEnd()}}};function kn(t){if(n=t.length){for(var n,e,i=0,r=t[0];++i<n;)r.n=e=t[i],e.p=r,r=e;r.n=e=t[0],e.p=r}}var Nn=Zt(),Cn=function(t,n){var e=n[0],i=n[1],r=[hn(e),-cn(e),0],o=0,a=0;Nn.reset();for(var u=0,c=t.length;u<c;++u)if(f=(s=t[u]).length)for(var s,f,h=s[f-1],l=h[0],d=h[1]/2+nn,_=hn(d),p=cn(d),y=0;y<f;++y,l=g,_=m,p=x,h=v){var v=s[y],g=v[0],b=v[1]/2+nn,m=hn(b),x=cn(b),w=g-l,M=w>=0?1:-1,T=M*w,k=T>Kt,N=_*m;if(Nn.add(un(N*M*hn(T),p*x+N*cn(T))),o+=k?w+M*en:w,k^l>=e^g>=e){var C=gn(vn(h),vn(v));bn(C);var S=gn(r,C);bn(S);var A=(k^w>=0?-1:1)*pn(S[2]);(i>A||i===A&&(C[0]||C[1]))&&(a+=k^w>=0?1:-1)}}return(o<-Gt||o<Gt&&Nn<-Gt)^1&a},Sn=function(t,n,e,r){return function(o){var a,u,c,s=n(o),f=xn(),h=n(f),l=!1,d={point:_,lineStart:y,lineEnd:v,polygonStart:function(){d.point=g,d.lineStart=b,d.lineEnd=m,u=[],a=[]},polygonEnd:function(){d.point=_,d.lineStart=y,d.lineEnd=v,u=Object(i.e)(u);var t=Cn(a,r);u.length?(l||(o.polygonStart(),l=!0),Tn(u,En,t,e,o)):t&&(l||(o.polygonStart(),l=!0),o.lineStart(),e(null,null,1,o),o.lineEnd()),l&&(o.polygonEnd(),l=!1),u=a=null},sphere:function(){o.polygonStart(),o.lineStart(),e(null,null,1,o),o.lineEnd(),o.polygonEnd()}};function _(n,e){t(n,e)&&o.point(n,e)}function p(t,n){s.point(t,n)}function y(){d.point=p,s.lineStart()}function v(){d.point=_,s.lineEnd()}function g(t,n){c.push([t,n]),h.point(t,n)}function b(){h.lineStart(),c=[]}function m(){g(c[0][0],c[0][1]),h.lineEnd();var t,n,e,i,r=h.clean(),s=f.result(),d=s.length;if(c.pop(),a.push(c),c=null,d)if(1&r){if((n=(e=s[0]).length-1)>0){for(l||(o.polygonStart(),l=!0),o.lineStart(),t=0;t<n;++t)o.point((i=e[t])[0],i[1]);o.lineEnd()}}else d>1&&2&r&&s.push(s.pop().concat(s.shift())),u.push(s.filter(An))}return d}};function An(t){return t.length>1}function En(t,n){return((t=t.x)[0]<0?t[1]-tn-Gt:tn-t[1])-((n=n.x)[0]<0?n[1]-tn-Gt:tn-n[1])}Sn(function(){return!0},function(t){var n,e=NaN,i=NaN,r=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,a){var u=o>0?Kt:-Kt,c=on(o-e);on(c-Kt)<Gt?(t.point(e,i=(i+a)/2>0?tn:-tn),t.point(r,i),t.lineEnd(),t.lineStart(),t.point(u,i),t.point(o,i),n=0):r!==u&&c>=Kt&&(on(e-r)<Gt&&(e-=r*Gt),on(o-u)<Gt&&(o-=u*Gt),i=function(t,n,e,i){var r,o,a=hn(t-e);return on(a)>Gt?an((hn(n)*(o=cn(i))*hn(e)-hn(i)*(r=cn(n))*hn(t))/(r*o*a)):(n+i)/2}(e,i,o,a),t.point(r,i),t.lineEnd(),t.lineStart(),t.point(u,i),n=0),t.point(e=o,i=a),r=u},lineEnd:function(){t.lineEnd(),e=i=NaN},clean:function(){return 2-n}}},function(t,n,e,i){var r;if(null==t)r=e*tn,i.point(-Kt,r),i.point(0,r),i.point(Kt,r),i.point(Kt,0),i.point(Kt,-r),i.point(0,-r),i.point(-Kt,-r),i.point(-Kt,0),i.point(-Kt,r);else if(on(t[0]-n[0])>Gt){var o=t[0]<n[0]?Kt:-Kt;r=e*o/2,i.point(-o,r),i.point(0,r),i.point(o,r)}else i.point(n[0],n[1])},[-Kt,-tn]);Zt();Zt(),Zt();function jn(t){this._context=t}jn.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,en)}},result:yn};Zt();function On(){this._string=[]}function Un(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}On.prototype={_radius:4.5,_circle:Un(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=Un(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};function Pn(t){return function(n){var e=new zn;for(var i in t)e[i]=t[i];return e.stream=n,e}}function zn(){}zn.prototype={constructor:zn,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};cn(30*rn);Pn({point:function(t,n){this.stream.point(t*rn,n*rn)}});function Ln(t){return function(n,e){var i=cn(n),r=cn(e),o=t(i*r);return[o*r*hn(n),o*hn(e)]}}function Dn(t){return function(n,e){var i=ln(n*n+e*e),r=t(i),o=hn(r),a=cn(r);return[un(n*o,i*a),pn(i&&e*o/i)]}}var Rn=Ln(function(t){return ln(2/(1+t))});Rn.invert=Dn(function(t){return 2*pn(t/2)});var Yn=Ln(function(t){return(t=_n(t))&&t/hn(t)});Yn.invert=Dn(function(t){return t});function qn(t,n){return[t,fn(dn((tn+n)/2))]}qn.invert=function(t,n){return[t,2*an(sn(n))-tn]};function Fn(t,n){return[t,n]}Fn.invert=Fn;function Hn(t,n){var e=cn(n),i=cn(t)*e;return[e*hn(t)/i,hn(n)/i]}Hn.invert=Dn(an);function Xn(t,n){var e=n*n,i=e*e;return[t*(.8707-.131979*e+i*(i*(.003971*e-.001529*i)-.013791)),n*(1.007226+e*(.015085+i*(.028874*e-.044475-.005916*i)))]}Xn.invert=function(t,n){var e,i=n,r=25;do{var o=i*i,a=o*o;i-=e=(i*(1.007226+o*(.015085+a*(.028874*o-.044475-.005916*a)))-n)/(1.007226+o*(.045255+a*(.259866*o-.311325-.005916*11*a)))}while(on(e)>Gt&&--r>0);return[t/(.8707+(o=i*i)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),i]};function In(t,n){return[cn(n)*hn(t),hn(n)]}In.invert=Dn(pn);function Vn(t,n){var e=cn(n),i=1+cn(t)*e;return[e*hn(t)/i,hn(n)/i]}Vn.invert=Dn(function(t){return 2*an(t)});function $n(t,n){return[fn(dn((tn+n)/2)),-t]}$n.invert=function(t,n){return[-n,2*an(sn(t))-tn]};function Bn(t){var n=0,e=t.children,i=e&&e.length;if(i)for(;--i>=0;)n+=e[i].value;else n=1;t.value=n}function Zn(t,n){var e,i,r,o,a,u=new Gn(t),c=+t.value&&(u.value=t.value),s=[u];for(null==n&&(n=Wn);e=s.pop();)if(c&&(e.value=+e.data.value),(r=n(e.data))&&(a=r.length))for(e.children=new Array(a),o=a-1;o>=0;--o)s.push(i=e.children[o]=new Gn(r[o])),i.parent=e,i.depth=e.depth+1;return u.eachBefore(Jn)}function Wn(t){return t.children}function Qn(t){t.data=t.data.data}function Jn(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function Gn(t){this.data=t,this.depth=this.height=0,this.parent=null}Gn.prototype=Zn.prototype={constructor:Gn,count:function(){return this.eachAfter(Bn)},each:function(t){var n,e,i,r,o=this,a=[o];do{for(n=a.reverse(),a=[];o=n.pop();)if(t(o),e=o.children)for(i=0,r=e.length;i<r;++i)a.push(e[i])}while(a.length);return this},eachAfter:function(t){for(var n,e,i,r=this,o=[r],a=[];r=o.pop();)if(a.push(r),n=r.children)for(e=0,i=n.length;e<i;++e)o.push(n[e]);for(;r=a.pop();)t(r);return this},eachBefore:function(t){for(var n,e,i=this,r=[i];i=r.pop();)if(t(i),n=i.children)for(e=n.length-1;e>=0;--e)r.push(n[e]);return this},sum:function(t){return this.eachAfter(function(n){for(var e=+t(n.data)||0,i=n.children,r=i&&i.length;--r>=0;)e+=i[r].value;n.value=e})},sort:function(t){return this.eachBefore(function(n){n.children&&n.children.sort(t)})},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),i=n.ancestors(),r=null;for(t=e.pop(),n=i.pop();t===n;)r=t,t=e.pop(),n=i.pop();return r}(n,t),i=[n];n!==e;)n=n.parent,i.push(n);for(var r=i.length;t!==e;)i.splice(r,0,t),t=t.parent;return i},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each(function(n){t.push(n)}),t},leaves:function(){var t=[];return this.eachBefore(function(n){n.children||t.push(n)}),t},links:function(){var t=this,n=[];return t.each(function(e){e!==t&&n.push({source:e.parent,target:e})}),n},copy:function(){return Zn(this).eachBefore(Qn)}};Array.prototype.slice;var Kn=function(t,n,e,i,r){for(var o,a=t.children,u=-1,c=a.length,s=t.value&&(i-n)/t.value;++u<c;)(o=a[u]).y0=e,o.y1=r,o.x0=n,o.x1=n+=o.value*s};function te(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}te.prototype=Object.create(Gn.prototype);var ne=function(t,n,e,i,r){for(var o,a=t.children,u=-1,c=a.length,s=t.value&&(r-e)/t.value;++u<c;)(o=a[u]).x0=n,o.x1=i,o.y0=e,o.y1=e+=o.value*s},ee=(1+Math.sqrt(5))/2;function ie(t,n,e,i,r,o){for(var a,u,c,s,f,h,l,d,_,p,y,v=[],g=n.children,b=0,m=0,x=g.length,w=n.value;b<x;){c=r-e,s=o-i;do{f=g[m++].value}while(!f&&m<x);for(h=l=f,y=f*f*(p=Math.max(s/c,c/s)/(w*t)),_=Math.max(l/y,y/h);m<x;++m){if(f+=u=g[m].value,u<h&&(h=u),u>l&&(l=u),y=f*f*p,(d=Math.max(l/y,y/h))>_){f-=u;break}_=d}v.push(a={value:f,dice:c<s,children:g.slice(b,m)}),a.dice?Kn(a,e,i,r,w?i+=s*f/w:o):ne(a,e,i,w?e+=c*f/w:r,o),w-=f,b=m}return v}(function t(n){function e(t,e,i,r,o){ie(n,t,e,i,r,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e})(ee),function t(n){function e(t,e,i,r,o){if((a=t._squarify)&&a.ratio===n)for(var a,u,c,s,f,h=-1,l=a.length,d=t.value;++h<l;){for(c=(u=a[h]).children,s=u.value=0,f=c.length;s<f;++s)u.value+=c[s].value;u.dice?Kn(u,e,i,r,i+=(o-i)*u.value/d):ne(u,e,i,e+=(r-e)*u.value/d,o),d-=u.value}else t._squarify=a=ie(n,t,e,i,r,o),a.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(ee);var re=[].slice,oe={};function ae(t){this._size=t,this._call=this._error=null,this._tasks=[],this._data=[],this._waiting=this._active=this._ended=this._start=0}function ue(t){if(!t._start)try{!function(t){for(;t._start=t._waiting&&t._active<t._size;){var n=t._ended+t._active,e=t._tasks[n],i=e.length-1,r=e[i];e[i]=ce(t,n),--t._waiting,++t._active,e=r.apply(null,e),t._tasks[n]&&(t._tasks[n]=e||oe)}}(t)}catch(n){if(t._tasks[t._ended+t._active-1])se(t,n);else if(!t._data)throw n}}function ce(t,n){return function(e,i){t._tasks[n]&&(--t._active,++t._ended,t._tasks[n]=null,null==t._error&&(null!=e?se(t,e):(t._data[n]=i,t._waiting?ue(t):fe(t))))}}function se(t,n){var e,i=t._tasks.length;for(t._error=n,t._data=void 0,t._waiting=NaN;--i>=0;)if((e=t._tasks[i])&&(t._tasks[i]=null,e.abort))try{e.abort()}catch(n){}t._active=NaN,fe(t)}function fe(t){if(!t._active&&t._call){var n=t._data;t._data=void 0,t._call(t._error,n)}}ae.prototype=function(t){if(null==t)t=1/0;else if(!((t=+t)>=1))throw new Error("invalid concurrency");return new ae(t)}.prototype={constructor:ae,defer:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("defer after await");if(null!=this._error)return this;var n=re.call(arguments,1);return n.push(t),++this._waiting,this._tasks.push(n),ue(this),this},abort:function(){return null==this._error&&se(this,new Error("abort")),this},await:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=function(n,e){t.apply(null,[n].concat(e))},fe(this),this},awaitAll:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=t,fe(this),this}};var he=function(){return Math.random()},le=(function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(he),function t(n){function e(t,e){var i,r;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=i)o=i,i=null;else do{i=2*n()-1,o=2*n()-1,r=i*i+o*o}while(!r||r>1);return t+e*o*Math.sqrt(-2*Math.log(r)/r)}}return e.source=t,e}(he)),de=(function t(n){function e(){var t=le.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(he),function t(n){function e(t){return function(){for(var e=0,i=0;i<t;++i)e+=n();return e}}return e.source=t,e}(he)),_e=(function t(n){function e(t){var e=de.source(n)(t);return function(){return e()/t}}return e.source=t,e}(he),function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(he),function(t,n){var e,i,r,o,a=w("beforesend","progress","load","error"),u=Object(Ct.a)(),c=new XMLHttpRequest,s=null,f=null,h=0;function l(t){var n,i=c.status;if(!i&&function(t){var n=t.responseType;return n&&"text"!==n?t.response:t.responseText}(c)||i>=200&&i<300||304===i){if(r)try{n=r.call(e,c)}catch(t){return void a.call("error",e,t)}else n=c;a.call("load",e,n)}else a.call("error",e,t)}if("undefined"==typeof XDomainRequest||"withCredentials"in c||!/^(http(s)?:)?\/\//.test(t)||(c=new XDomainRequest),"onload"in c?c.onload=c.onerror=c.ontimeout=l:c.onreadystatechange=function(t){c.readyState>3&&l(t)},c.onprogress=function(t){a.call("progress",e,t)},e={header:function(t,n){return t=(t+"").toLowerCase(),arguments.length<2?u.get(t):(null==n?u.remove(t):u.set(t,n+""),e)},mimeType:function(t){return arguments.length?(i=null==t?null:t+"",e):i},responseType:function(t){return arguments.length?(o=t,e):o},timeout:function(t){return arguments.length?(h=+t,e):h},user:function(t){return arguments.length<1?s:(s=null==t?null:t+"",e)},password:function(t){return arguments.length<1?f:(f=null==t?null:t+"",e)},response:function(t){return r=t,e},get:function(t,n){return e.send("GET",t,n)},post:function(t,n){return e.send("POST",t,n)},send:function(n,r,l){return c.open(n,t,!0,s,f),null==i||u.has("accept")||u.set("accept",i+",*/*"),c.setRequestHeader&&u.each(function(t,n){c.setRequestHeader(n,t)}),null!=i&&c.overrideMimeType&&c.overrideMimeType(i),null!=o&&(c.responseType=o),h>0&&(c.timeout=h),null==l&&"function"==typeof r&&(l=r,r=null),null!=l&&1===l.length&&(l=function(t){return function(n,e){t(null==n?e:null)}}(l)),null!=l&&e.on("error",l).on("load",function(t){l(null,t)}),a.call("beforesend",e,c),c.send(null==r?null:r),e},abort:function(){return c.abort(),e},on:function(){var t=a.on.apply(a,arguments);return t===a?e:t}},null!=n){if("function"!=typeof n)throw new Error("invalid callback: "+n);return e.get(n)}return e});var pe=function(t,n){return function(e,i){var r=_e(e).mimeType(t).response(n);if(null!=i){if("function"!=typeof i)throw new Error("invalid callback: "+i);return r.get(i)}return r}},ye=(pe("text/html",function(t){return document.createRange().createContextualFragment(t.responseText)}),pe("application/json",function(t){return JSON.parse(t.responseText)}),pe("text/plain",function(t){return t.responseText}),pe("application/xml",function(t){var n=t.responseXML;if(!n)throw new Error("parse error");return n}),function(t,n){return function(e,i,r){arguments.length<3&&(r=i,i=null);var o=_e(e).mimeType(t);return o.row=function(t){return arguments.length?o.response(function(t,n){return function(e){return t(e.responseText,n)}}(n,i=t)):i},o.row(i),r?o.get(r):o}});ye("text/csv",Lt),ye("text/tab-separated-values",Rt);var ve=e(11),ge=e(10);e(1),e(9);function be(){this._=null}function me(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function xe(t,n){var e=n,i=n.R,r=e.U;r?r.L===e?r.L=i:r.R=i:t._=i,i.U=r,e.U=i,e.R=i.L,e.R&&(e.R.U=e),i.L=e}function we(t,n){var e=n,i=n.L,r=e.U;r?r.L===e?r.L=i:r.R=i:t._=i,i.U=r,e.U=i,e.L=i.R,e.L&&(e.L.U=e),i.R=e}function Me(t){for(;t.L;)t=t.L;return t}be.prototype={constructor:be,insert:function(t,n){var e,i,r;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=Me(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(i=e.U).L?(r=i.R)&&r.C?(e.C=r.C=!1,i.C=!0,t=i):(t===e.R&&(xe(this,e),e=(t=e).U),e.C=!1,i.C=!0,we(this,i)):(r=i.L)&&r.C?(e.C=r.C=!1,i.C=!0,t=i):(t===e.L&&(we(this,e),e=(t=e).U),e.C=!1,i.C=!0,xe(this,i)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,i,r=t.U,o=t.L,a=t.R;if(e=o?a?Me(a):o:a,r?r.L===t?r.L=e:r.R=e:this._=e,o&&a?(i=e.C,e.C=t.C,e.L=o,o.U=e,e!==a?(r=e.U,e.U=t.U,t=e.R,r.L=t,e.R=a,a.U=e):(e.U=r,r=e,t=e.R)):(i=t.C,t=e),t&&(t.U=r),!i)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===r.L){if((n=r.R).C&&(n.C=!1,r.C=!0,xe(this,r),n=r.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,we(this,n),n=r.R),n.C=r.C,r.C=n.R.C=!1,xe(this,r),t=this._;break}}else if((n=r.L).C&&(n.C=!1,r.C=!0,we(this,r),n=r.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,xe(this,n),n=r.L),n.C=r.C,r.C=n.L.C=!1,we(this,r),t=this._;break}n.C=!0,t=r,r=r.U}while(!t.C);t&&(t.C=!1)}}};var Te=be;function ke(t,n,e,i){var r=[null,null],o=We.push(r)-1;return r.left=t,r.right=n,e&&Ce(r,t,n,e),i&&Ce(r,n,t,i),Be[t.index].halfedges.push(o),Be[n.index].halfedges.push(o),r}function Ne(t,n,e){var i=[n,e];return i.left=t,i}function Ce(t,n,e,i){t[0]||t[1]?t.left===e?t[1]=i:t[0]=i:(t[0]=i,t.left=n,t.right=e)}function Se(t,n,e,i,r){var o,a=t[0],u=t[1],c=a[0],s=a[1],f=0,h=1,l=u[0]-c,d=u[1]-s;if(o=n-c,l||!(o>0)){if(o/=l,l<0){if(o<f)return;o<h&&(h=o)}else if(l>0){if(o>h)return;o>f&&(f=o)}if(o=i-c,l||!(o<0)){if(o/=l,l<0){if(o>h)return;o>f&&(f=o)}else if(l>0){if(o<f)return;o<h&&(h=o)}if(o=e-s,d||!(o>0)){if(o/=d,d<0){if(o<f)return;o<h&&(h=o)}else if(d>0){if(o>h)return;o>f&&(f=o)}if(o=r-s,d||!(o<0)){if(o/=d,d<0){if(o>h)return;o>f&&(f=o)}else if(d>0){if(o<f)return;o<h&&(h=o)}return!(f>0||h<1)||(f>0&&(t[0]=[c+f*l,s+f*d]),h<1&&(t[1]=[c+h*l,s+h*d]),!0)}}}}}function Ae(t,n,e,i,r){var o=t[1];if(o)return!0;var a,u,c=t[0],s=t.left,f=t.right,h=s[0],l=s[1],d=f[0],_=f[1],p=(h+d)/2,y=(l+_)/2;if(_===l){if(p<n||p>=i)return;if(h>d){if(c){if(c[1]>=r)return}else c=[p,e];o=[p,r]}else{if(c){if(c[1]<e)return}else c=[p,r];o=[p,e]}}else if(u=y-(a=(h-d)/(_-l))*p,a<-1||a>1)if(h>d){if(c){if(c[1]>=r)return}else c=[(e-u)/a,e];o=[(r-u)/a,r]}else{if(c){if(c[1]<e)return}else c=[(r-u)/a,r];o=[(e-u)/a,e]}else if(l<_){if(c){if(c[0]>=i)return}else c=[n,a*n+u];o=[i,a*i+u]}else{if(c){if(c[0]<n)return}else c=[i,a*i+u];o=[n,a*n+u]}return t[0]=c,t[1]=o,!0}function Ee(t,n){var e=t.site,i=n.left,r=n.right;return e===r&&(r=i,i=e),r?Math.atan2(r[1]-i[1],r[0]-i[0]):(e===i?(i=n[1],r=n[0]):(i=n[0],r=n[1]),Math.atan2(i[0]-r[0],r[1]-i[1]))}function je(t,n){return n[+(n.left!==t.site)]}function Oe(t,n){return n[+(n.left===t.site)]}var Ue,Pe=[];function ze(){me(this),this.x=this.y=this.arc=this.site=this.cy=null}function Le(t){var n=t.P,e=t.N;if(n&&e){var i=n.site,r=t.site,o=e.site;if(i!==o){var a=r[0],u=r[1],c=i[0]-a,s=i[1]-u,f=o[0]-a,h=o[1]-u,l=2*(c*h-s*f);if(!(l>=-Je)){var d=c*c+s*s,_=f*f+h*h,p=(h*d-s*_)/l,y=(c*_-f*d)/l,v=Pe.pop()||new ze;v.arc=t,v.site=r,v.x=p+a,v.y=(v.cy=y+u)+Math.sqrt(p*p+y*y),t.circle=v;for(var g=null,b=Ze._;b;)if(v.y<b.y||v.y===b.y&&v.x<=b.x){if(!b.L){g=b.P;break}b=b.L}else{if(!b.R){g=b;break}b=b.R}Ze.insert(g,v),g||(Ue=v)}}}}function De(t){var n=t.circle;n&&(n.P||(Ue=n.N),Ze.remove(n),Pe.push(n),me(n),t.circle=null)}var Re=[];function Ye(){me(this),this.edge=this.site=this.circle=null}function qe(t){var n=Re.pop()||new Ye;return n.site=t,n}function Fe(t){De(t),$e.remove(t),Re.push(t),me(t)}function He(t){var n=t.circle,e=n.x,i=n.cy,r=[e,i],o=t.P,a=t.N,u=[t];Fe(t);for(var c=o;c.circle&&Math.abs(e-c.circle.x)<Qe&&Math.abs(i-c.circle.cy)<Qe;)o=c.P,u.unshift(c),Fe(c),c=o;u.unshift(c),De(c);for(var s=a;s.circle&&Math.abs(e-s.circle.x)<Qe&&Math.abs(i-s.circle.cy)<Qe;)a=s.N,u.push(s),Fe(s),s=a;u.push(s),De(s);var f,h=u.length;for(f=1;f<h;++f)s=u[f],c=u[f-1],Ce(s.edge,c.site,s.site,r);c=u[0],(s=u[h-1]).edge=ke(c.site,s.site,null,r),Le(c),Le(s)}function Xe(t){for(var n,e,i,r,o=t[0],a=t[1],u=$e._;u;)if((i=Ie(u,a)-o)>Qe)u=u.L;else{if(!((r=o-Ve(u,a))>Qe)){i>-Qe?(n=u.P,e=u):r>-Qe?(n=u,e=u.N):n=e=u;break}if(!u.R){n=u;break}u=u.R}!function(t){Be[t.index]={site:t,halfedges:[]}}(t);var c=qe(t);if($e.insert(n,c),n||e){if(n===e)return De(n),e=qe(n.site),$e.insert(c,e),c.edge=e.edge=ke(n.site,c.site),Le(n),void Le(e);if(e){De(n),De(e);var s=n.site,f=s[0],h=s[1],l=t[0]-f,d=t[1]-h,_=e.site,p=_[0]-f,y=_[1]-h,v=2*(l*y-d*p),g=l*l+d*d,b=p*p+y*y,m=[(y*g-d*b)/v+f,(l*b-p*g)/v+h];Ce(e.edge,s,_,m),c.edge=ke(s,t,null,m),e.edge=ke(t,_,null,m),Le(n),Le(e)}else c.edge=ke(n.site,c.site)}}function Ie(t,n){var e=t.site,i=e[0],r=e[1],o=r-n;if(!o)return i;var a=t.P;if(!a)return-1/0;var u=(e=a.site)[0],c=e[1],s=c-n;if(!s)return u;var f=u-i,h=1/o-1/s,l=f/s;return h?(-l+Math.sqrt(l*l-2*h*(f*f/(-2*s)-c+s/2+r-o/2)))/h+i:(i+u)/2}function Ve(t,n){var e=t.N;if(e)return Ie(e,n);var i=t.site;return i[1]===n?i[0]:1/0}var $e,Be,Ze,We,Qe=1e-6,Je=1e-12;function Ge(t,n){return n[1]-t[1]||n[0]-t[0]}function Ke(t,n){var e,i,r,o=t.sort(Ge).pop();for(We=[],Be=new Array(t.length),$e=new Te,Ze=new Te;;)if(r=Ue,o&&(!r||o[1]<r.y||o[1]===r.y&&o[0]<r.x))o[0]===e&&o[1]===i||(Xe(o),e=o[0],i=o[1]),o=t.pop();else{if(!r)break;He(r.arc)}if(function(){for(var t,n,e,i,r=0,o=Be.length;r<o;++r)if((t=Be[r])&&(i=(n=t.halfedges).length)){var a=new Array(i),u=new Array(i);for(e=0;e<i;++e)a[e]=e,u[e]=Ee(t,We[n[e]]);for(a.sort(function(t,n){return u[n]-u[t]}),e=0;e<i;++e)u[e]=n[a[e]];for(e=0;e<i;++e)n[e]=u[e]}}(),n){var a=+n[0][0],u=+n[0][1],c=+n[1][0],s=+n[1][1];!function(t,n,e,i){for(var r,o=We.length;o--;)Ae(r=We[o],t,n,e,i)&&Se(r,t,n,e,i)&&(Math.abs(r[0][0]-r[1][0])>Qe||Math.abs(r[0][1]-r[1][1])>Qe)||delete We[o]}(a,u,c,s),function(t,n,e,i){var r,o,a,u,c,s,f,h,l,d,_,p,y=Be.length,v=!0;for(r=0;r<y;++r)if(o=Be[r]){for(a=o.site,u=(c=o.halfedges).length;u--;)We[c[u]]||c.splice(u,1);for(u=0,s=c.length;u<s;)_=(d=Oe(o,We[c[u]]))[0],p=d[1],h=(f=je(o,We[c[++u%s]]))[0],l=f[1],(Math.abs(_-h)>Qe||Math.abs(p-l)>Qe)&&(c.splice(u,0,We.push(Ne(a,d,Math.abs(_-t)<Qe&&i-p>Qe?[t,Math.abs(h-t)<Qe?l:i]:Math.abs(p-i)<Qe&&e-_>Qe?[Math.abs(l-i)<Qe?h:e,i]:Math.abs(_-e)<Qe&&p-n>Qe?[e,Math.abs(h-e)<Qe?l:n]:Math.abs(p-n)<Qe&&_-t>Qe?[Math.abs(l-n)<Qe?h:t,n]:null))-1),++s);s&&(v=!1)}if(v){var g,b,m,x=1/0;for(r=0,v=null;r<y;++r)(o=Be[r])&&(m=(g=(a=o.site)[0]-t)*g+(b=a[1]-n)*b)<x&&(x=m,v=o);if(v){var w=[t,n],M=[t,i],T=[e,i],k=[e,n];v.halfedges.push(We.push(Ne(a=v.site,w,M))-1,We.push(Ne(a,M,T))-1,We.push(Ne(a,T,k))-1,We.push(Ne(a,k,w))-1)}}for(r=0;r<y;++r)(o=Be[r])&&(o.halfedges.length||delete Be[r])}(a,u,c,s)}this.edges=We,this.cells=Be,$e=Ze=We=Be=null}Ke.prototype={constructor:Ke,polygons:function(){var t=this.edges;return this.cells.map(function(n){var e=n.halfedges.map(function(e){return je(n,t[e])});return e.data=n.site.data,e})},triangles:function(){var t=[],n=this.edges;return this.cells.forEach(function(e,i){if(o=(r=e.halfedges).length)for(var r,o,a,u,c,s,f=e.site,h=-1,l=n[r[o-1]],d=l.left===f?l.right:l.left;++h<o;)a=d,d=(l=n[r[h]]).left===f?l.right:l.left,a&&d&&i<a.index&&i<d.index&&(c=a,s=d,((u=f)[0]-s[0])*(c[1]-u[1])-(u[0]-c[0])*(s[1]-u[1])<0)&&t.push([f.data,a.data,d.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,n,e){for(var i,r,o=this,a=o._found||0,u=o.cells.length;!(r=o.cells[a]);)if(++a>=u)return null;var c=t-r.site[0],s=n-r.site[1],f=c*c+s*s;do{r=o.cells[i=a],a=null,r.halfedges.forEach(function(e){var i=o.edges[e],u=i.left;if(u!==r.site&&u||(u=i.right)){var c=t-u[0],s=n-u[1],h=c*c+s*s;h<f&&(f=h,a=u.index)}})}while(null!==a);return o._found=i,null==e||f<=e*e?r.site:null}};var ti=function(t){return function(){return t}};function ni(t,n,e){this.target=t,this.type=n,this.transform=e}function ei(t,n,e){this.k=t,this.x=n,this.y=e}ei.prototype={constructor:ei,scale:function(t){return 1===t?this:new ei(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new ei(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var ii=new ei(1,0,0);function ri(){M.b.stopImmediatePropagation()}ei.prototype;var oi=function(){M.b.preventDefault(),M.b.stopImmediatePropagation()};function ai(){return!M.b.button}function ui(){var t,n,e=this;return e instanceof SVGElement?(t=(e=e.ownerSVGElement||e).width.baseVal.value,n=e.height.baseVal.value):(t=e.clientWidth,n=e.clientHeight),[[0,0],[t,n]]}function ci(){return this.__zoom||ii}function si(){return-M.b.deltaY*(M.b.deltaMode?120:1)/500}function fi(){return"ontouchstart"in this}function hi(t,n,e){var i=t.invertX(n[0][0])-e[0][0],r=t.invertX(n[1][0])-e[1][0],o=t.invertY(n[0][1])-e[0][1],a=t.invertY(n[1][1])-e[1][1];return t.translate(r>i?(i+r)/2:Math.min(0,i)||Math.max(0,r),a>o?(o+a)/2:Math.min(0,o)||Math.max(0,a))}var li=function(){var t,n,e=ai,i=ui,r=hi,o=si,a=fi,u=[0,1/0],c=[[-1/0,-1/0],[1/0,1/0]],s=250,f=D.i,h=[],l=w("start","zoom","end"),d=500,_=150,p=0;function y(t){t.property("__zoom",ci).on("wheel.zoom",k).on("mousedown.zoom",S).on("dblclick.zoom",A).filter(a).on("touchstart.zoom",E).on("touchmove.zoom",j).on("touchend.zoom touchcancel.zoom",O).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function v(t,n){return(n=Math.max(u[0],Math.min(u[1],n)))===t.k?t:new ei(n,t.x,t.y)}function g(t,n,e){var i=n[0]-e[0]*t.k,r=n[1]-e[1]*t.k;return i===t.x&&r===t.y?t:new ei(t.k,i,r)}function b(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function m(t,n,e){t.on("start.zoom",function(){x(this,arguments).start()}).on("interrupt.zoom end.zoom",function(){x(this,arguments).end()}).tween("zoom",function(){var t=arguments,r=x(this,t),o=i.apply(this,t),a=e||b(o),u=Math.max(o[1][0]-o[0][0],o[1][1]-o[0][1]),c=this.__zoom,s="function"==typeof n?n.apply(this,t):n,h=f(c.invert(a).concat(u/c.k),s.invert(a).concat(u/s.k));return function(t){if(1===t)t=s;else{var n=h(t),e=u/n[2];t=new ei(e,a[0]-n[0]*e,a[1]-n[1]*e)}r.zoom(null,t)}})}function x(t,n){for(var e,i=0,r=h.length;i<r;++i)if((e=h[i]).that===t)return e;return new T(t,n)}function T(t,n){this.that=t,this.args=n,this.index=-1,this.active=0,this.extent=i.apply(t,n)}function k(){if(e.apply(this,arguments)){var t=x(this,arguments),n=this.__zoom,i=Math.max(u[0],Math.min(u[1],n.k*Math.pow(2,o.apply(this,arguments)))),a=Object(M.d)(this);if(t.wheel)t.mouse[0][0]===a[0]&&t.mouse[0][1]===a[1]||(t.mouse[1]=n.invert(t.mouse[0]=a)),clearTimeout(t.wheel);else{if(n.k===i)return;t.mouse=[a,n.invert(a)],_t(this),t.start()}oi(),t.wheel=setTimeout(function(){t.wheel=null,t.end()},_),t.zoom("mouse",r(g(v(n,i),t.mouse[0],t.mouse[1]),t.extent,c))}}function S(){if(!n&&e.apply(this,arguments)){var t=x(this,arguments),i=Object(M.f)(M.b.view).on("mousemove.zoom",function(){if(oi(),!t.moved){var n=M.b.clientX-a,e=M.b.clientY-u;t.moved=n*n+e*e>p}t.zoom("mouse",r(g(t.that.__zoom,t.mouse[0]=Object(M.d)(t.that),t.mouse[1]),t.extent,c))},!0).on("mouseup.zoom",function(){i.on("mousemove.zoom mouseup.zoom",null),C(M.b.view,t.moved),oi(),t.end()},!0),o=Object(M.d)(this),a=M.b.clientX,u=M.b.clientY;N(M.b.view),ri(),t.mouse=[o,this.__zoom.invert(o)],_t(this),t.start()}}function A(){if(e.apply(this,arguments)){var t=this.__zoom,n=Object(M.d)(this),o=t.invert(n),a=t.k*(M.b.shiftKey?.5:2),u=r(g(v(t,a),n,o),i.apply(this,arguments),c);oi(),s>0?Object(M.f)(this).transition().duration(s).call(m,u,n):Object(M.f)(this).call(y.transform,u)}}function E(){if(e.apply(this,arguments)){var n,i,r,o,a=x(this,arguments),u=M.b.changedTouches,c=u.length;for(ri(),i=0;i<c;++i)r=u[i],o=[o=Object(M.k)(this,u,r.identifier),this.__zoom.invert(o),r.identifier],a.touch0?a.touch1||(a.touch1=o):(a.touch0=o,n=!0);if(t&&(t=clearTimeout(t),!a.touch1))return a.end(),void((o=Object(M.f)(this).on("dblclick.zoom"))&&o.apply(this,arguments));n&&(t=setTimeout(function(){t=null},d),_t(this),a.start())}}function j(){var n,e,i,o,a=x(this,arguments),u=M.b.changedTouches,s=u.length;for(oi(),t&&(t=clearTimeout(t)),n=0;n<s;++n)e=u[n],i=Object(M.k)(this,u,e.identifier),a.touch0&&a.touch0[2]===e.identifier?a.touch0[0]=i:a.touch1&&a.touch1[2]===e.identifier&&(a.touch1[0]=i);if(e=a.that.__zoom,a.touch1){var f=a.touch0[0],h=a.touch0[1],l=a.touch1[0],d=a.touch1[1],_=(_=l[0]-f[0])*_+(_=l[1]-f[1])*_,p=(p=d[0]-h[0])*p+(p=d[1]-h[1])*p;e=v(e,Math.sqrt(_/p)),i=[(f[0]+l[0])/2,(f[1]+l[1])/2],o=[(h[0]+d[0])/2,(h[1]+d[1])/2]}else{if(!a.touch0)return;i=a.touch0[0],o=a.touch0[1]}a.zoom("touch",r(g(e,i,o),a.extent,c))}function O(){var t,e,i=x(this,arguments),r=M.b.changedTouches,o=r.length;for(ri(),n&&clearTimeout(n),n=setTimeout(function(){n=null},d),t=0;t<o;++t)e=r[t],i.touch0&&i.touch0[2]===e.identifier?delete i.touch0:i.touch1&&i.touch1[2]===e.identifier&&delete i.touch1;i.touch1&&!i.touch0&&(i.touch0=i.touch1,delete i.touch1),i.touch0?i.touch0[1]=this.__zoom.invert(i.touch0[0]):i.end()}return y.transform=function(t,n){var e=t.selection?t.selection():t;e.property("__zoom",ci),t!==e?m(t,n):e.interrupt().each(function(){x(this,arguments).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()})},y.scaleBy=function(t,n){y.scaleTo(t,function(){return this.__zoom.k*("function"==typeof n?n.apply(this,arguments):n)})},y.scaleTo=function(t,n){y.transform(t,function(){var t=i.apply(this,arguments),e=this.__zoom,o=b(t),a=e.invert(o),u="function"==typeof n?n.apply(this,arguments):n;return r(g(v(e,u),o,a),t,c)})},y.translateBy=function(t,n,e){y.transform(t,function(){return r(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof e?e.apply(this,arguments):e),i.apply(this,arguments),c)})},y.translateTo=function(t,n,e){y.transform(t,function(){var t=i.apply(this,arguments),o=this.__zoom,a=b(t);return r(ii.translate(a[0],a[1]).scale(o.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof e?-e.apply(this,arguments):-e),t,c)})},T.prototype={start:function(){return 1==++this.active&&(this.index=h.push(this)-1,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(h.splice(this.index,1),this.index=-1,this.emit("end")),this},emit:function(t){Object(M.a)(new ni(y,t,this.that.__zoom),l.apply,l,[t,this.that,this.args])}},y.wheelDelta=function(t){return arguments.length?(o="function"==typeof t?t:ti(+t),y):o},y.filter=function(t){return arguments.length?(e="function"==typeof t?t:ti(!!t),y):e},y.touchable=function(t){return arguments.length?(a="function"==typeof t?t:ti(!!t),y):a},y.extent=function(t){return arguments.length?(i="function"==typeof t?t:ti([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),y):i},y.scaleExtent=function(t){return arguments.length?(u[0]=+t[0],u[1]=+t[1],y):[u[0],u[1]]},y.translateExtent=function(t){return arguments.length?(c[0][0]=+t[0][0],c[1][0]=+t[1][0],c[0][1]=+t[0][1],c[1][1]=+t[1][1],y):[[c[0][0],c[0][1]],[c[1][0],c[1][1]]]},y.constrain=function(t){return arguments.length?(r=t,y):r},y.duration=function(t){return arguments.length?(s=+t,y):s},y.interpolate=function(t){return arguments.length?(f=t,y):f},y.on=function(){var t=l.on.apply(l,arguments);return t===l?y:t},y.clickDistance=function(t){return arguments.length?(p=(t=+t)*t,y):Math.sqrt(p)},y};e.d(n,"a",function(){return i.a}),e.d(n,"h",function(){return i.d}),e.d(n,"i",function(){return i.g}),e.d(n,"n",function(){return i.h}),e.d(n,"b",function(){return p}),e.d(n,"c",function(){return y}),e.d(n,"j",function(){return yt.f}),e.d(n,"d",function(){return L}),e.d(n,"f",function(){return Bt.a}),e.d(n,"k",function(){return ve.a}),e.d(n,"l",function(){return ve.b}),e.d(n,"m",function(){return M.f}),e.d(n,"e",function(){return M.b}),e.d(n,"g",function(){return ge.b}),e.d(n,"o",function(){return li})},function(t,n,e){"use strict";var i=e(1);function r(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function o(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function a(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}var u,c,s,f,h={"-":"",_:" ",0:"0"},l=/^\s*\d+/,d=/^%/,_=/[\\^$*+?|[\]().{}]/g;function p(t,n,e){var i=t<0?"-":"",r=(i?-t:t)+"",o=r.length;return i+(o<e?new Array(e-o+1).join(n)+r:r)}function y(t){return t.replace(_,"\\$&")}function v(t){return new RegExp("^(?:"+t.map(y).join("|")+")","i")}function g(t){for(var n={},e=-1,i=t.length;++e<i;)n[t[e].toLowerCase()]=e;return n}function b(t,n,e){var i=l.exec(n.slice(e,e+1));return i?(t.w=+i[0],e+i[0].length):-1}function m(t,n,e){var i=l.exec(n.slice(e,e+1));return i?(t.u=+i[0],e+i[0].length):-1}function x(t,n,e){var i=l.exec(n.slice(e,e+2));return i?(t.U=+i[0],e+i[0].length):-1}function w(t,n,e){var i=l.exec(n.slice(e,e+2));return i?(t.V=+i[0],e+i[0].length):-1}function M(t,n,e){var i=l.exec(n.slice(e,e+2));return i?(t.W=+i[0],e+i[0].length):-1}function T(t,n,e){var i=l.exec(n.slice(e,e+4));return i?(t.y=+i[0],e+i[0].length):-1}function k(t,n,e){var i=l.exec(n.slice(e,e+2));return i?(t.y=+i[0]+(+i[0]>68?1900:2e3),e+i[0].length):-1}function N(t,n,e){var i=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return i?(t.Z=i[1]?0:-(i[2]+(i[3]||"00")),e+i[0].length):-1}function C(t,n,e){var i=l.exec(n.slice(e,e+2));return i?(t.m=i[0]-1,e+i[0].length):-1}function S(t,n,e){var i=l.exec(n.slice(e,e+2));return i?(t.d=+i[0],e+i[0].length):-1}function A(t,n,e){var i=l.exec(n.slice(e,e+3));return i?(t.m=0,t.d=+i[0],e+i[0].length):-1}function E(t,n,e){var i=l.exec(n.slice(e,e+2));return i?(t.H=+i[0],e+i[0].length):-1}function j(t,n,e){var i=l.exec(n.slice(e,e+2));return i?(t.M=+i[0],e+i[0].length):-1}function O(t,n,e){var i=l.exec(n.slice(e,e+2));return i?(t.S=+i[0],e+i[0].length):-1}function U(t,n,e){var i=l.exec(n.slice(e,e+3));return i?(t.L=+i[0],e+i[0].length):-1}function P(t,n,e){var i=l.exec(n.slice(e,e+6));return i?(t.L=Math.floor(i[0]/1e3),e+i[0].length):-1}function z(t,n,e){var i=d.exec(n.slice(e,e+1));return i?e+i[0].length:-1}function L(t,n,e){var i=l.exec(n.slice(e));return i?(t.Q=+i[0],e+i[0].length):-1}function D(t,n,e){var i=l.exec(n.slice(e));return i?(t.Q=1e3*+i[0],e+i[0].length):-1}function R(t,n){return p(t.getDate(),n,2)}function Y(t,n){return p(t.getHours(),n,2)}function q(t,n){return p(t.getHours()%12||12,n,2)}function F(t,n){return p(1+i.a.count(Object(i.k)(t),t),n,3)}function H(t,n){return p(t.getMilliseconds(),n,3)}function X(t,n){return H(t,n)+"000"}function I(t,n){return p(t.getMonth()+1,n,2)}function V(t,n){return p(t.getMinutes(),n,2)}function $(t,n){return p(t.getSeconds(),n,2)}function B(t){var n=t.getDay();return 0===n?7:n}function Z(t,n){return p(i.h.count(Object(i.k)(t),t),n,2)}function W(t,n){var e=t.getDay();return t=e>=4||0===e?Object(i.i)(t):i.i.ceil(t),p(i.i.count(Object(i.k)(t),t)+(4===Object(i.k)(t).getDay()),n,2)}function Q(t){return t.getDay()}function J(t,n){return p(i.e.count(Object(i.k)(t),t),n,2)}function G(t,n){return p(t.getFullYear()%100,n,2)}function K(t,n){return p(t.getFullYear()%1e4,n,4)}function tt(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+p(n/60|0,"0",2)+p(n%60,"0",2)}function nt(t,n){return p(t.getUTCDate(),n,2)}function et(t,n){return p(t.getUTCHours(),n,2)}function it(t,n){return p(t.getUTCHours()%12||12,n,2)}function rt(t,n){return p(1+i.l.count(Object(i.v)(t),t),n,3)}function ot(t,n){return p(t.getUTCMilliseconds(),n,3)}function at(t,n){return ot(t,n)+"000"}function ut(t,n){return p(t.getUTCMonth()+1,n,2)}function ct(t,n){return p(t.getUTCMinutes(),n,2)}function st(t,n){return p(t.getUTCSeconds(),n,2)}function ft(t){var n=t.getUTCDay();return 0===n?7:n}function ht(t,n){return p(i.s.count(Object(i.v)(t),t),n,2)}function lt(t,n){var e=t.getUTCDay();return t=e>=4||0===e?Object(i.t)(t):i.t.ceil(t),p(i.t.count(Object(i.v)(t),t)+(4===Object(i.v)(t).getUTCDay()),n,2)}function dt(t){return t.getUTCDay()}function _t(t,n){return p(i.p.count(Object(i.v)(t),t),n,2)}function pt(t,n){return p(t.getUTCFullYear()%100,n,2)}function yt(t,n){return p(t.getUTCFullYear()%1e4,n,4)}function vt(){return"+0000"}function gt(){return"%"}function bt(t){return+t}function mt(t){return Math.floor(+t/1e3)}u=function(t){var n=t.dateTime,e=t.date,u=t.time,c=t.periods,s=t.days,f=t.shortDays,l=t.months,d=t.shortMonths,_=v(c),p=g(c),y=v(s),xt=g(s),wt=v(f),Mt=g(f),Tt=v(l),kt=g(l),Nt=v(d),Ct=g(d),St={a:function(t){return f[t.getDay()]},A:function(t){return s[t.getDay()]},b:function(t){return d[t.getMonth()]},B:function(t){return l[t.getMonth()]},c:null,d:R,e:R,f:X,H:Y,I:q,j:F,L:H,m:I,M:V,p:function(t){return c[+(t.getHours()>=12)]},Q:bt,s:mt,S:$,u:B,U:Z,V:W,w:Q,W:J,x:null,X:null,y:G,Y:K,Z:tt,"%":gt},At={a:function(t){return f[t.getUTCDay()]},A:function(t){return s[t.getUTCDay()]},b:function(t){return d[t.getUTCMonth()]},B:function(t){return l[t.getUTCMonth()]},c:null,d:nt,e:nt,f:at,H:et,I:it,j:rt,L:ot,m:ut,M:ct,p:function(t){return c[+(t.getUTCHours()>=12)]},Q:bt,s:mt,S:st,u:ft,U:ht,V:lt,w:dt,W:_t,x:null,X:null,y:pt,Y:yt,Z:vt,"%":gt},Et={a:function(t,n,e){var i=wt.exec(n.slice(e));return i?(t.w=Mt[i[0].toLowerCase()],e+i[0].length):-1},A:function(t,n,e){var i=y.exec(n.slice(e));return i?(t.w=xt[i[0].toLowerCase()],e+i[0].length):-1},b:function(t,n,e){var i=Nt.exec(n.slice(e));return i?(t.m=Ct[i[0].toLowerCase()],e+i[0].length):-1},B:function(t,n,e){var i=Tt.exec(n.slice(e));return i?(t.m=kt[i[0].toLowerCase()],e+i[0].length):-1},c:function(t,e,i){return Ut(t,n,e,i)},d:S,e:S,f:P,H:E,I:E,j:A,L:U,m:C,M:j,p:function(t,n,e){var i=_.exec(n.slice(e));return i?(t.p=p[i[0].toLowerCase()],e+i[0].length):-1},Q:L,s:D,S:O,u:m,U:x,V:w,w:b,W:M,x:function(t,n,i){return Ut(t,e,n,i)},X:function(t,n,e){return Ut(t,u,n,e)},y:k,Y:T,Z:N,"%":z};function jt(t,n){return function(e){var i,r,o,a=[],u=-1,c=0,s=t.length;for(e instanceof Date||(e=new Date(+e));++u<s;)37===t.charCodeAt(u)&&(a.push(t.slice(c,u)),null!=(r=h[i=t.charAt(++u)])?i=t.charAt(++u):r="e"===i?" ":"0",(o=n[i])&&(i=o(e,r)),a.push(i),c=u+1);return a.push(t.slice(c,u)),a.join("")}}function Ot(t,n){return function(e){var r,u,c=a(1900);if(Ut(c,t,e+="",0)!=e.length)return null;if("Q"in c)return new Date(c.Q);if("p"in c&&(c.H=c.H%12+12*c.p),"V"in c){if(c.V<1||c.V>53)return null;"w"in c||(c.w=1),"Z"in c?(u=(r=o(a(c.y))).getUTCDay(),r=u>4||0===u?i.p.ceil(r):Object(i.p)(r),r=i.l.offset(r,7*(c.V-1)),c.y=r.getUTCFullYear(),c.m=r.getUTCMonth(),c.d=r.getUTCDate()+(c.w+6)%7):(u=(r=n(a(c.y))).getDay(),r=u>4||0===u?i.e.ceil(r):Object(i.e)(r),r=i.a.offset(r,7*(c.V-1)),c.y=r.getFullYear(),c.m=r.getMonth(),c.d=r.getDate()+(c.w+6)%7)}else("W"in c||"U"in c)&&("w"in c||(c.w="u"in c?c.u%7:"W"in c?1:0),u="Z"in c?o(a(c.y)).getUTCDay():n(a(c.y)).getDay(),c.m=0,c.d="W"in c?(c.w+6)%7+7*c.W-(u+5)%7:c.w+7*c.U-(u+6)%7);return"Z"in c?(c.H+=c.Z/100|0,c.M+=c.Z%100,o(c)):n(c)}}function Ut(t,n,e,i){for(var r,o,a=0,u=n.length,c=e.length;a<u;){if(i>=c)return-1;if(37===(r=n.charCodeAt(a++))){if(r=n.charAt(a++),!(o=Et[r in h?n.charAt(a++):r])||(i=o(t,e,i))<0)return-1}else if(r!=e.charCodeAt(i++))return-1}return i}return St.x=jt(e,St),St.X=jt(u,St),St.c=jt(n,St),At.x=jt(e,At),At.X=jt(u,At),At.c=jt(n,At),{format:function(t){var n=jt(t+="",St);return n.toString=function(){return t},n},parse:function(t){var n=Ot(t+="",r);return n.toString=function(){return t},n},utcFormat:function(t){var n=jt(t+="",At);return n.toString=function(){return t},n},utcParse:function(t){var n=Ot(t,o);return n.toString=function(){return t},n}}}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]}),c=u.format,u.parse,s=u.utcFormat,f=u.utcParse;Date.prototype.toISOString||s("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||f("%Y-%m-%dT%H:%M:%S.%LZ");e.d(n,"a",function(){return c}),e.d(n,"b",function(){return s})},function(t,n,e){"use strict";var i=e(5),r=function(t){return function(){return t}},o=Math.abs,a=Math.atan2,u=Math.cos,c=Math.max,s=Math.min,f=Math.sin,h=Math.sqrt,l=1e-12,d=Math.PI,_=d/2,p=2*d;function y(t){return t>=1?_:t<=-1?-_:Math.asin(t)}function v(t){return t.innerRadius}function g(t){return t.outerRadius}function b(t){return t.startAngle}function m(t){return t.endAngle}function x(t){return t&&t.padAngle}function w(t,n,e,i,r,o,a){var u=t-e,s=n-i,f=(a?o:-o)/h(u*u+s*s),l=f*s,d=-f*u,_=t+l,p=n+d,y=e+l,v=i+d,g=(_+y)/2,b=(p+v)/2,m=y-_,x=v-p,w=m*m+x*x,M=r-o,T=_*v-y*p,k=(x<0?-1:1)*h(c(0,M*M*w-T*T)),N=(T*x-m*k)/w,C=(-T*m-x*k)/w,S=(T*x+m*k)/w,A=(-T*m+x*k)/w,E=N-g,j=C-b,O=S-g,U=A-b;return E*E+j*j>O*O+U*U&&(N=S,C=A),{cx:N,cy:C,x01:-l,y01:-d,x11:N*(r/M-1),y11:C*(r/M-1)}}var M=function(){var t=v,n=g,e=r(0),c=null,M=b,T=m,k=x,N=null;function C(){var r,v,g,b=+t.apply(this,arguments),m=+n.apply(this,arguments),x=M.apply(this,arguments)-_,C=T.apply(this,arguments)-_,S=o(C-x),A=C>x;if(N||(N=r=Object(i.a)()),m<b&&(v=m,m=b,b=v),m>l)if(S>p-l)N.moveTo(m*u(x),m*f(x)),N.arc(0,0,m,x,C,!A),b>l&&(N.moveTo(b*u(C),b*f(C)),N.arc(0,0,b,C,x,A));else{var E,j,O=x,U=C,P=x,z=C,L=S,D=S,R=k.apply(this,arguments)/2,Y=R>l&&(c?+c.apply(this,arguments):h(b*b+m*m)),q=s(o(m-b)/2,+e.apply(this,arguments)),F=q,H=q;if(Y>l){var X=y(Y/b*f(R)),I=y(Y/m*f(R));(L-=2*X)>l?(P+=X*=A?1:-1,z-=X):(L=0,P=z=(x+C)/2),(D-=2*I)>l?(O+=I*=A?1:-1,U-=I):(D=0,O=U=(x+C)/2)}var V=m*u(O),$=m*f(O),B=b*u(z),Z=b*f(z);if(q>l){var W=m*u(U),Q=m*f(U),J=b*u(P),G=b*f(P);if(S<d){var K=L>l?function(t,n,e,i,r,o,a,u){var c=e-t,s=i-n,f=a-r,h=u-o,l=(f*(n-o)-h*(t-r))/(h*c-f*s);return[t+l*c,n+l*s]}(V,$,J,G,W,Q,B,Z):[B,Z],tt=V-K[0],nt=$-K[1],et=W-K[0],it=Q-K[1],rt=1/f(((g=(tt*et+nt*it)/(h(tt*tt+nt*nt)*h(et*et+it*it)))>1?0:g<-1?d:Math.acos(g))/2),ot=h(K[0]*K[0]+K[1]*K[1]);F=s(q,(b-ot)/(rt-1)),H=s(q,(m-ot)/(rt+1))}}D>l?H>l?(E=w(J,G,V,$,m,H,A),j=w(W,Q,B,Z,m,H,A),N.moveTo(E.cx+E.x01,E.cy+E.y01),H<q?N.arc(E.cx,E.cy,H,a(E.y01,E.x01),a(j.y01,j.x01),!A):(N.arc(E.cx,E.cy,H,a(E.y01,E.x01),a(E.y11,E.x11),!A),N.arc(0,0,m,a(E.cy+E.y11,E.cx+E.x11),a(j.cy+j.y11,j.cx+j.x11),!A),N.arc(j.cx,j.cy,H,a(j.y11,j.x11),a(j.y01,j.x01),!A))):(N.moveTo(V,$),N.arc(0,0,m,O,U,!A)):N.moveTo(V,$),b>l&&L>l?F>l?(E=w(B,Z,W,Q,b,-F,A),j=w(V,$,J,G,b,-F,A),N.lineTo(E.cx+E.x01,E.cy+E.y01),F<q?N.arc(E.cx,E.cy,F,a(E.y01,E.x01),a(j.y01,j.x01),!A):(N.arc(E.cx,E.cy,F,a(E.y01,E.x01),a(E.y11,E.x11),!A),N.arc(0,0,b,a(E.cy+E.y11,E.cx+E.x11),a(j.cy+j.y11,j.cx+j.x11),A),N.arc(j.cx,j.cy,F,a(j.y11,j.x11),a(j.y01,j.x01),!A))):N.arc(0,0,b,z,P,A):N.lineTo(B,Z)}else N.moveTo(0,0);if(N.closePath(),r)return N=null,r+""||null}return C.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,i=(+M.apply(this,arguments)+ +T.apply(this,arguments))/2-d/2;return[u(i)*e,f(i)*e]},C.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:r(+n),C):t},C.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:r(+t),C):n},C.cornerRadius=function(t){return arguments.length?(e="function"==typeof t?t:r(+t),C):e},C.padRadius=function(t){return arguments.length?(c=null==t?null:"function"==typeof t?t:r(+t),C):c},C.startAngle=function(t){return arguments.length?(M="function"==typeof t?t:r(+t),C):M},C.endAngle=function(t){return arguments.length?(T="function"==typeof t?t:r(+t),C):T},C.padAngle=function(t){return arguments.length?(k="function"==typeof t?t:r(+t),C):k},C.context=function(t){return arguments.length?(N=null==t?null:t,C):N},C};function T(t){this._context=t}T.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var k=function(t){return new T(t)};function N(t){return t[0]}function C(t){return t[1]}var S=function(){var t=N,n=C,e=r(!0),o=null,a=k,u=null;function c(r){var c,s,f,h=r.length,l=!1;for(null==o&&(u=a(f=Object(i.a)())),c=0;c<=h;++c)!(c<h&&e(s=r[c],c,r))===l&&((l=!l)?u.lineStart():u.lineEnd()),l&&u.point(+t(s,c,r),+n(s,c,r));if(f)return u=null,f+""||null}return c.x=function(n){return arguments.length?(t="function"==typeof n?n:r(+n),c):t},c.y=function(t){return arguments.length?(n="function"==typeof t?t:r(+t),c):n},c.defined=function(t){return arguments.length?(e="function"==typeof t?t:r(!!t),c):e},c.curve=function(t){return arguments.length?(a=t,null!=o&&(u=a(o)),c):a},c.context=function(t){return arguments.length?(null==t?o=u=null:u=a(o=t),c):o},c},A=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},E=function(t){return t},j=function(){var t=E,n=A,e=null,i=r(0),o=r(p),a=r(0);function u(r){var u,c,s,f,h,l=r.length,d=0,_=new Array(l),y=new Array(l),v=+i.apply(this,arguments),g=Math.min(p,Math.max(-p,o.apply(this,arguments)-v)),b=Math.min(Math.abs(g)/l,a.apply(this,arguments)),m=b*(g<0?-1:1);for(u=0;u<l;++u)(h=y[_[u]=u]=+t(r[u],u,r))>0&&(d+=h);for(null!=n?_.sort(function(t,e){return n(y[t],y[e])}):null!=e&&_.sort(function(t,n){return e(r[t],r[n])}),u=0,s=d?(g-l*m)/d:0;u<l;++u,v=f)c=_[u],f=v+((h=y[c])>0?h*s:0)+m,y[c]={data:r[c],index:u,value:h,startAngle:v,endAngle:f,padAngle:b};return y}return u.value=function(n){return arguments.length?(t="function"==typeof n?n:r(+n),u):t},u.sortValues=function(t){return arguments.length?(n=t,e=null,u):n},u.sort=function(t){return arguments.length?(e=t,n=null,u):e},u.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:r(+t),u):i},u.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:r(+t),u):o},u.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:r(+t),u):a},u};U(k);function O(t){this._curve=t}function U(t){function n(n){return new O(t(n))}return n._curve=t,n}O.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};Array.prototype.slice;Math.sqrt(1/3);var P=Math.sin(d/10)/Math.sin(7*d/10),z=(Math.sin(p/10),Math.cos(p/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(){});function L(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function D(t){this._context=t}D.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:L(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:L(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function R(t){this._context=t}R.prototype={areaStart:z,areaEnd:z,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:L(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function Y(t){this._context=t}Y.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,i=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,i):this._context.moveTo(e,i);break;case 3:this._point=4;default:L(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function q(t,n){this._basis=new D(t),this._beta=n}q.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var i,r=t[0],o=n[0],a=t[e]-r,u=n[e]-o,c=-1;++c<=e;)i=c/e,this._basis.point(this._beta*t[c]+(1-this._beta)*(r+i*a),this._beta*n[c]+(1-this._beta)*(o+i*u));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};(function t(n){function e(t){return 1===n?new D(t):new q(t,n)}return e.beta=function(n){return t(+n)},e})(.85);function F(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function H(t,n){this._context=t,this._k=(1-n)/6}H.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:F(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:F(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new H(t,n)}return e.tension=function(n){return t(+n)},e})(0);function X(t,n){this._context=t,this._k=(1-n)/6}X.prototype={areaStart:z,areaEnd:z,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:F(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new X(t,n)}return e.tension=function(n){return t(+n)},e})(0);function I(t,n){this._context=t,this._k=(1-n)/6}I.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:F(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new I(t,n)}return e.tension=function(n){return t(+n)},e})(0);function V(t,n,e){var i=t._x1,r=t._y1,o=t._x2,a=t._y2;if(t._l01_a>l){var u=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);i=(i*u-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,r=(r*u-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>l){var s=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,f=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*s+t._x1*t._l23_2a-n*t._l12_2a)/f,a=(a*s+t._y1*t._l23_2a-e*t._l12_2a)/f}t._context.bezierCurveTo(i,r,o,a,t._x2,t._y2)}function $(t,n){this._context=t,this._alpha=n}$.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,i=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+i*i,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:V(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new $(t,n):new H(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function B(t,n){this._context=t,this._alpha=n}B.prototype={areaStart:z,areaEnd:z,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,i=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+i*i,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:V(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new B(t,n):new X(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function Z(t,n){this._context=t,this._alpha=n}Z.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,i=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+i*i,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:V(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new Z(t,n):new I(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function W(t){this._context=t}W.prototype={areaStart:z,areaEnd:z,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}};function Q(t){return t<0?-1:1}function J(t,n,e){var i=t._x1-t._x0,r=n-t._x1,o=(t._y1-t._y0)/(i||r<0&&-0),a=(e-t._y1)/(r||i<0&&-0),u=(o*r+a*i)/(i+r);return(Q(o)+Q(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(u))||0}function G(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function K(t,n,e){var i=t._x0,r=t._y0,o=t._x1,a=t._y1,u=(o-i)/3;t._context.bezierCurveTo(i+u,r+u*n,o-u,a-u*e,o,a)}function tt(t){this._context=t}function nt(t){this._context=new et(t)}function et(t){this._context=t}function it(t){this._context=t}function rt(t){var n,e,i=t.length-1,r=new Array(i),o=new Array(i),a=new Array(i);for(r[0]=0,o[0]=2,a[0]=t[0]+2*t[1],n=1;n<i-1;++n)r[n]=1,o[n]=4,a[n]=4*t[n]+2*t[n+1];for(r[i-1]=2,o[i-1]=7,a[i-1]=8*t[i-1]+t[i],n=1;n<i;++n)e=r[n]/o[n-1],o[n]-=e,a[n]-=e*a[n-1];for(r[i-1]=a[i-1]/o[i-1],n=i-2;n>=0;--n)r[n]=(a[n]-r[n+1])/o[n];for(o[i-1]=(t[i]+r[i-1])/2,n=0;n<i-1;++n)o[n]=2*t[n+1]-r[n+1];return[r,o]}tt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:K(this,this._t0,G(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,K(this,G(this,e=J(this,t,n)),e);break;default:K(this,this._t0,e=J(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(nt.prototype=Object.create(tt.prototype)).point=function(t,n){tt.prototype.point.call(this,n,t)},et.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,i,r,o){this._context.bezierCurveTo(n,t,i,e,o,r)}},it.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var i=rt(t),r=rt(n),o=0,a=1;a<e;++o,++a)this._context.bezierCurveTo(i[0][o],r[0][o],i[1][o],r[1][o],t[a],n[a]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}};function ot(t,n){this._context=t,this._t=n}ot.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};e.d(n,"a",function(){return M}),e.d(n,"b",function(){return S}),e.d(n,"c",function(){return j})},function(t,n,e){"use strict";var i=e(2),r=e(7),o=Array.prototype,a=o.map,u=o.slice,c={name:"implicit"};function s(t){var n=Object(r.a)(),e=[],i=c;function o(r){var o=r+"",a=n.get(o);if(!a){if(i!==c)return i;n.set(o,a=e.push(r))}return t[(a-1)%t.length]}return t=null==t?[]:u.call(t),o.domain=function(t){if(!arguments.length)return e.slice();e=[],n=Object(r.a)();for(var i,a,u=-1,c=t.length;++u<c;)n.has(a=(i=t[u])+"")||n.set(a,e.push(i));return o},o.range=function(n){return arguments.length?(t=u.call(n),o):t.slice()},o.unknown=function(t){return arguments.length?(i=t,o):i},o.copy=function(){return s().domain(e).range(t).unknown(i)},o}function f(){var t,n,e=s().unknown(void 0),r=e.domain,o=e.range,a=[0,1],u=!1,c=0,h=0,l=.5;function d(){var e=r().length,s=a[1]<a[0],f=a[s-0],d=a[1-s];t=(d-f)/Math.max(1,e-c+2*h),u&&(t=Math.floor(t)),f+=(d-f-t*(e-c))*l,n=t*(1-c),u&&(f=Math.round(f),n=Math.round(n));var _=Object(i.g)(e).map(function(n){return f+t*n});return o(s?_.reverse():_)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),d()):r()},e.range=function(t){return arguments.length?(a=[+t[0],+t[1]],d()):a.slice()},e.rangeRound=function(t){return a=[+t[0],+t[1]],u=!0,d()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(u=!!t,d()):u},e.padding=function(t){return arguments.length?(c=h=Math.max(0,Math.min(1,t)),d()):c},e.paddingInner=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),d()):c},e.paddingOuter=function(t){return arguments.length?(h=Math.max(0,Math.min(1,t)),d()):h},e.align=function(t){return arguments.length?(l=Math.max(0,Math.min(1,t)),d()):l},e.copy=function(){return f().domain(r()).range(a).round(u).paddingInner(c).paddingOuter(h).align(l)},d()}var h=e(4),l=function(t){return function(){return t}},d=function(t){return+t},_=[0,1];function p(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:l(n)}function y(t,n,e,i){var r=t[0],o=t[1],a=n[0],u=n[1];return o<r?(r=e(o,r),a=i(u,a)):(r=e(r,o),a=i(a,u)),function(t){return a(r(t))}}function v(t,n,e,r){var o=Math.min(t.length,n.length)-1,a=new Array(o),u=new Array(o),c=-1;for(t[o]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++c<o;)a[c]=e(t[c],t[c+1]),u[c]=r(n[c],n[c+1]);return function(n){var e=Object(i.b)(t,n,1,o)-1;return u[e](a[e](n))}}function g(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function b(t,n){var e,i,r,o=_,c=_,s=h.a,f=!1;function l(){return e=Math.min(o.length,c.length)>2?v:y,i=r=null,g}function g(n){return(i||(i=e(o,c,f?function(t){return function(n,e){var i=t(n=+n,e=+e);return function(t){return t<=n?0:t>=e?1:i(t)}}}(t):t,s)))(+n)}return g.invert=function(t){return(r||(r=e(c,o,p,f?function(t){return function(n,e){var i=t(n=+n,e=+e);return function(t){return t<=0?n:t>=1?e:i(t)}}}(n):n)))(+t)},g.domain=function(t){return arguments.length?(o=a.call(t,d),l()):o.slice()},g.range=function(t){return arguments.length?(c=u.call(t),l()):c.slice()},g.rangeRound=function(t){return c=u.call(t),s=h.e,l()},g.clamp=function(t){return arguments.length?(f=!!t,l()):f},g.interpolate=function(t){return arguments.length?(s=t,l()):s},l()}var m=e(6),x=function(t,n,e){var r,o=t[0],a=t[t.length-1],u=Object(i.k)(o,a,null==n?10:n);switch((e=Object(m.c)(null==e?",f":e)).type){case"s":var c=Math.max(Math.abs(o),Math.abs(a));return null!=e.precision||isNaN(r=Object(m.e)(u,c))||(e.precision=r),Object(m.b)(e,c);case"":case"e":case"g":case"p":case"r":null!=e.precision||isNaN(r=Object(m.f)(u,Math.max(Math.abs(o),Math.abs(a))))||(e.precision=r-("e"===e.type));break;case"f":case"%":null!=e.precision||isNaN(r=Object(m.d)(u))||(e.precision=r-2*("%"===e.type))}return Object(m.a)(e)};function w(t){var n=t.domain;return t.ticks=function(t){var e=n();return Object(i.l)(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){return x(n(),t,e)},t.nice=function(e){null==e&&(e=10);var r,o=n(),a=0,u=o.length-1,c=o[a],s=o[u];return s<c&&(r=c,c=s,s=r,r=a,a=u,u=r),(r=Object(i.j)(c,s,e))>0?(c=Math.floor(c/r)*r,s=Math.ceil(s/r)*r,r=Object(i.j)(c,s,e)):r<0&&(c=Math.ceil(c*r)/r,s=Math.floor(s*r)/r,r=Object(i.j)(c,s,e)),r>0?(o[a]=Math.floor(c/r)*r,o[u]=Math.ceil(s/r)*r,n(o)):r<0&&(o[a]=Math.ceil(c*r)/r,o[u]=Math.floor(s*r)/r,n(o)),t},t}function M(){var t=b(p,h.c);return t.copy=function(){return g(t,M())},w(t)}e(1),e(9);var T=function(t){return t.match(/.{6}/g).map(function(t){return"#"+t})},k=(T("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),T("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6"),T("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9"),T("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5")),N=e(3);Object(h.b)(Object(N.b)(300,.5,0),Object(N.b)(-240,.5,1)),Object(h.b)(Object(N.b)(-100,.75,.35),Object(N.b)(80,1.5,.8)),Object(h.b)(Object(N.b)(260,.75,.35),Object(N.b)(80,1.5,.8)),Object(N.b)();function C(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}C(T("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),C(T("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),C(T("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),C(T("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));e.d(n,"a",function(){return f}),e.d(n,"b",function(){return M}),e.d(n,"c",function(){return s}),e.d(n,"d",function(){return k})},,,,,,,function(t,n,e){"use strict";e.r(n);var i=e(8),r=[[.5,.5],[.7,.8],[.4,.9],[.11,.32],[.88,.25],[.75,.12],[.5,.1],[.2,.3],[.4,.1],[.6,.7]],o={top:30,right:30,bottom:30,left:30},a=i.m("body").append("svg").attr("width",400).attr("height",400),u=i.l().domain([0,1.2*i.h(r,function(t){return t[0]})]).range([0,300]),c=i.l().domain([0,1.2*i.h(r,function(t){return t[1]})]).range([300,0]);h();var s=i.b(u);a.append("g").attr("transform","translate("+o.left+", "+(o.top+300)+")").call(s);var f=i.c(c).ticks(5);function h(){var t=a.selectAll("circle").data(r);t.exit().remove(),t.enter().append("circle").merge(t).attr("fill","black").transition().duration(2e3).attr("cx",function(t){return o.left+u(t[0])}).attr("cy",function(t){return o.top+c(t[1])}).attr("r",5)}a.append("g").attr("transform","translate("+o.left+", "+o.top+")").call(f),document.getElementById("update").addEventListener("click",function(){i.n(r),h()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,